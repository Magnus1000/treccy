<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-P6GBQ545');</script>
<!-- End Google Tag Manager -->

<!-- Mapbox styles and scripts -->
<link href='https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.css' rel='stylesheet' />
<script src='https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.js'></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" type="text/css" />
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>

<!-- UUID -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/uuid/8.3.2/uuidv4.min.js"></script>

<!-- Algolia script -->
<script src="https://cdn.jsdelivr.net/npm/algoliasearch@4.5.1/dist/algoliasearch-lite.umd.js"></script>

<script>
// Globals and Configuration
console.log("Script Initiated");

let currentMarkers = [];
const mapboxToken = 'pk.eyJ1IjoibWFnbnVzMTk5MyIsImEiOiJjbGwyOHUxZTcyYTc1M2VwZDhzZGY3bG13In0._jM6tBke0CyM5_udTKGDOQ';
const algoliaConfig = {
    appId: "CWUIX0EWFE",
    apiKey: "4cd4c82105f395affbc472c07a9789c8",
    indexName: 'treccy_races_all'
};

const disciplineMarkers = {
    'swimming': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833f1995f2e23c39eacc_swimming-icon-50.svg',
    'paddling': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d28340c9aa33055043be71_paddling-icon-50.svg',
    'running': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833f7badb96d1c86df8b_running-icon-50.svg',
    'cycling': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833fff1d33088ebee8f4_cycling-icon-50.svg',
    'default': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64ce497c38241ed462982298_favicon32.jpg'
};

// 1) Checks User Location
async function getLocation() {
    console.log("Getting User Location...");
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject('Geolocation is not supported by your browser.');
        } else {
            navigator.geolocation.getCurrentPosition((position) => {
                resolve({
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                });
            }, () => {
                reject('Unable to retrieve your location.');
            });
        }
    });
}

// 2) Searches Algolia
async function fetchAlgoliaResults(lat, lng) {
    console.log("Fetching Algolia Results...");

    const filters = [];
    const searchClient = algoliasearch(algoliaConfig.appId, algoliaConfig.apiKey);
    const index = searchClient.initIndex(algoliaConfig.indexName);

    const disciplineFilterCheckbox = document.getElementById('disciplineFilter_checkbox');
    if (disciplineFilterCheckbox && disciplineFilterCheckbox.checked) {
        const filterValue = disciplineFilterCheckbox.getAttribute('filter-value');
        if (filterValue) {
            filters.push(`Disciplines=${filterValue}`);
        }
    }

    console.log("Filters being sent to Algolia:", filters);
    
    const debugURL = `https://${algoliaConfig.appId}-dsn.algolia.net/1/indexes/${algoliaConfig.indexName}/query?hitsPerPage=20&aroundLatLng=${lat},${lng}&aroundRadius=5000000&filters=${filters.join(' AND ')}`;
    console.log("Debug URL with parameters:", debugURL);

    const results = await index.search('', {
        hitsPerPage: 20,
        aroundLatLng: `${lat},${lng}`,
        aroundRadius: 5000000,
        filters: filters.join(' AND ')
    });

    console.log("Algolia Search Results:", results);
    return results.hits;
}

// 3) Returns results to the algoliaRaces grid
// Date formatting function
function formatDate(dateString) {
    const date = new Date(dateString);
    const day = date.getDate();
    const month = date.toLocaleString('en-US', { month: 'short' });
    const year = date.getFullYear().toString().substr(-2);
    const formattedDate = `${day} ${month} ${year}`;
    
    console.log("Formatted date:", formattedDate);
    return formattedDate;
}

// Load Algolia Results
async function loadAlgoliaResultsToDiv(lat, lng) {
    console.log("Fetching and Displaying Algolia Results in Div...");

    const results = await fetchAlgoliaResults(lat, lng);

    const algoliaRacesDiv = document.getElementById('algoliaRaces');
    algoliaRacesDiv.innerHTML = '';  // Clear any previous data

    results.forEach(result => {
        const formattedDate = formatDate(result.date_ag); // Format the date using the function

        const raceCardHTML = `
        <div class="race-card">
            <div class="race-card-top-block">
                <a href="/races/${result.slug_ag}" class="race-card-image-link-block w-inline-block">
                    <img src="${result.photo_main_ag}" loading="lazy" alt="${result.name_ag}" class="race-card-image">
                </a>
                <div class="race-discipline-tags-wrapper">
                    <div class="race-discipline-tags-list">
                        <div class="race-discipline-tag-div">
                            <img src="https://global-uploads.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833f7badb96d1c86df8b_running-icon-50.svg" loading="lazy" alt="" class="race-discipline-icon">
                        </div>
                    </div>
                </div>
                <div class="heart-icon-div">
                    <div class="heart-icon w-embed">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" aria-hidden="true" role="presentation" focusable="false">
                            <path d="M16 28c7-4.73 14-10 14-17a6.98 6.98 0 0 0-7-7c-1.8 0-3.58.68-4.95 2.05L16 8.1l-2.05-2.05a6.98 6.98 0 0 0-9.9 0A6.98 6.98 0 0 0 2 11c0 7 7 12.27 14 17z"></path>
                        </svg>
                    </div>
                </div>
            </div>
            <a href="/races/${result.slug_ag}" id="textLinkblock" class="card-text-link-block w-inline-block">
                <div class="race-card-heading-div">
                    <h4 id="raceNameid" class="race-card-heading">${result.name_ag}</h4>
                    <h4 id="raceDistanceid" class="race-card-heading-right">${result.distance_ag}</h4>
                </div>
                <div class="race-card-location-tags">
                    <div class="race-card-location-tags-left-column">
                        <h5 id="raceCityid" class="race-grid-location">${result.city_ag}</h5>
                        <h5 class="race-grid-location comma">,</h5>
                        <h5 id="raceCountryid" class="race-grid-location">${result.country_ag}</h5>
                    </div>
                </div>
                <div id="racecardDate" class="race-card-date-text">${formattedDate}</div>
            </a>
        </div>
    `;
    algoliaRacesDiv.innerHTML += raceCardHTML;
});
}
</script>

<script>
// 4) Displays results on the map
function removeExistingMarkers() {
    for (const marker of currentMarkers) {
        marker.remove();
    }
    currentMarkers = [];
}

function createMarkerOnMap(map, result) {
    let markerImageUrl;
    
    if (result.disciplines_ag.length === 1) {
        let disciplineKey = result.disciplines_ag[0].toLowerCase();
        // Check if the discipline key exists in the disciplineMarkers object
        if (disciplineMarkers[disciplineKey]) {
            markerImageUrl = disciplineMarkers[disciplineKey];
        } else {
            // Log a warning to the console if the key is not found
            console.warn(`Discipline key not found: ${disciplineKey}`);
            markerImageUrl = 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64ce497c38241ed462982298_favicon32.jpg';
        }
    } else {
        // Use a generic marker for multiple disciplines
        markerImageUrl = 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64ce497c38241ed462982298_favicon32.jpg';
    }

    // Creating the disciplines div
    let disciplinesDiv = '';
    result.disciplines_ag.forEach(discipline => {
        disciplinesDiv += `<div class="map-popup-discipline">${discipline}</div>`;
    });

    // Formatted date
    const formattedDate = formatDate(result.date_ag);

    const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(`
        <div class="map-popup-div">
            <div class="map-popup-image-div">
                <a href="/races/${result.slug_ag}" class="map-popup-link-block w-inline-block">
                    <img src="${result.photo_main_ag}" loading="lazy" alt="" class="map-popup-image">
                </a>
                <div class="map-popup-discipline-div">${disciplinesDiv}</div>
                <div class="heart-icon-div"><div class="heart-icon w-embed"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" aria-hidden="true" role="presentation" focusable="false">
  <path d="M16 28c7-4.73 14-10 14-17a6.98 6.98 0 0 0-7-7c-1.8 0-3.58.68-4.95 2.05L16 8.1l-2.05-2.05a6.98 6.98 0 0 0-9.9 0A6.98 6.98 0 0 0 2 11c0 7 7 12.27 14 17z"></path>
</svg></div>
                </div>
            </div>
            <a href="/races/${result.slug_ag}" class="link-block w-inline-block">
                <div class="map-popup-header-div">
                    <div class="map-popup-header">${result.name_ag}</div>
                </div>
                <div class="map-popup-country-and-date-div">
                    <div class="map-popup-header-country-div">
                        <div class="map-popup-city-text">${result.city_ag}</div>
                        <div class="map-popup-comma">, </div>
                        <div class="map-popup-country-text">${result.country_ag}</div>
                    </div>
                    <div class="map-popup-date-div">
                        <div class="map-popup-date-text">${formattedDate}</div>
                    </div>
                </div>
            </a>
        </div>
    `);

    const customMarker = new Image(50, 50);
    customMarker.src = markerImageUrl;

    const marker = new mapboxgl.Marker(customMarker)
        .setLngLat([result._geoloc.lng, result._geoloc.lat])
        .setPopup(popup)
        .addTo(map);

    currentMarkers.push(marker);
}



async function displayMapWithResults(lat, lng) {
    console.log("Displaying Map with Results...");
    
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/magnus1993/cll28qk0n006a01pu7y9h0ouv',
        center: [lng, lat],
        zoom: 10,
        accessToken: mapboxToken  
    });

    // Fetch Algolia Results
    const results = await fetchAlgoliaResults(lat, lng);
    
    // Clear any existing markers
    removeExistingMarkers();

    // Display Algolia results on the map
    results.forEach(result => {
        createMarkerOnMap(map, result);
    });

    map.resize();
}
</script>

<script>
// Function to load the view from URL parameters
function loadViewFromUrlParams() {
  const urlSearchParams = new URLSearchParams(window.location.search);
  const viewType = urlSearchParams.get('view');
  if (viewType === 'map') {
    document.getElementById('showMap').click();
  } else if (viewType === 'list') {
    document.getElementById('showList').click();
  }
  console.log(`Loaded view from URL: ${viewType}`);
}

// 6) Check the URL parameters and preset the filter if there are any filters already set
function checkAndPresetFilters() {
  console.log("Checking and Presetting Filters from URL Params...");

  const urlSearchParams = new URLSearchParams(window.location.search);

  // Handle discipline filters (can be multiple)
  Array.from(urlSearchParams.keys()).forEach(key => {
    if (key.startsWith('discipline')) {
      const disciplineValue = urlSearchParams.get(key);
      const checkbox = document.querySelector(`input[filter-value='${disciplineValue}']`);
      if (checkbox) {
        checkbox.checked = true;
        const parentLabel = checkbox.closest(".w-checkbox.checkbox-buttons");
        parentLabel.classList.add("active-filter");
      }
    }
  });

  // Handle minDist filter
  const minDist = urlSearchParams.get('minDist');
  if (minDist) {
    const minDistInput = document.getElementById('minimum-distance');
    if (minDistInput) {
      minDistInput.value = minDist;
    }
  }

  // Handle maxDist filter
  const maxDist = urlSearchParams.get('maxDist');
  if (maxDist) {
    const maxDistInput = document.getElementById('maximum-distance');
    if (maxDistInput) {
      maxDistInput.value = maxDist;
    }
  }

  // Handle locationRange filter
  const locationRange = urlSearchParams.get('locationRange');
  if (locationRange) {
    const locationRangeInput = document.getElementById('location_range');
    if (locationRangeInput) {
      locationRangeInput.value = locationRange;
    }
  }

  // Handle fromDate filter
  const fromDate = urlSearchParams.get('fromDate');
  if (fromDate) {
    const fromDateInput = document.getElementById('dateFrom');
    if (fromDateInput) {
      fromDateInput.value = fromDate;
    }
  }

  // Handle toDate filter
  const toDate = urlSearchParams.get('toDate');
  if (toDate) {
    const toDateInput = document.getElementById('dateTo');
    if (toDateInput) {
      toDateInput.value = toDate;
    }
  }

  // Handle type filter
  const type = urlSearchParams.get('type');
  if (type) {
    const radioButton = document.getElementById(type);
    if (radioButton) {
      radioButton.checked = true;
    }
  }

  // Handle location filter
  const location = urlSearchParams.get('location');
  const lat = urlSearchParams.get('lat');
  const lon = urlSearchParams.get('lon');
  if (location) {
    const searchBarElement = document.getElementById('search-bar');
    if (searchBarElement) {
      searchBarElement.value = location;
      if (lat) searchBarElement.setAttribute('data-lat', lat);
      if (lon) searchBarElement.setAttribute('data-lon', lon);
    }
  }
}

// Load View Based on View Params
loadViewFromUrlParams();
</script>

<script>
// On Page Load Logic
document.addEventListener("DOMContentLoaded", async function() {
    console.log("Page Loaded");

    const userLocation = await getLocation();
    console.log("User Location:", userLocation);

    // Load Algolia Results to the Grid
    loadAlgoliaResultsToDiv(userLocation.lat, userLocation.lng);

    // Display Results on the Map
    displayMapWithResults(userLocation.lat, userLocation.lng);

    // Checkbox Styling
    initializeCheckboxStyling();

    // Listen to Filter Form Submission
    document.getElementById('filterForm').addEventListener('submit', (event) => {
        event.preventDefault();
        updateURLWithFilters();
        console.log("Filter form submitted and URL updated.");
        displayMapWithResults(userLocation.lat, userLocation.lng);

        // Hide the modal with ID "filterForm"
        document.getElementById('filterForm').style.display = 'none';
    });

    // Check and Preset Filters from URL Params
    checkAndPresetFilters();
});
</script>

<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/@algolia/autocomplete-theme-classic"
/>
<style>
  :root {
    --aa-icon-size: 80px;
  }
</style>
<script src="https://cdn.jsdelivr.net/npm/@algolia/autocomplete-js"></script>
<script src="https://cdn.jsdelivr.net/npm/preact/dist/preact.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/algoliasearch@4.5.1/dist/algoliasearch-lite.umd.js"></script>
<script>
const { autocomplete, getAlgoliaResults } = window['@algolia/autocomplete-js'];
const appId = "CWUIX0EWFE";
const apiKey = "4cd4c82105f395affbc472c07a9789c8"; // Updated API key
const searchClient = algoliasearch(appId, apiKey);
const indexName = "treccy_races_all";

console.log("Initializing Algolia autocomplete..."); // Log initialization

const { setIsOpen } = autocomplete({
    container: "#global-race-search",
    placeholder: "Search this blog",
    detachedMediaQuery: '',
    openOnFocus: true,
    getSources({ query, state }) {
      console.log("Query received:", query); // Log the query

      if (!query) {
        return [];
      }

      return [
        {
          sourceId: "races",
          getItems() {
            console.log("Fetching results from Algolia..."); // Log fetching

            return getAlgoliaResults({
              searchClient,
              queries: [
                {
                  indexName: indexName,
                  query,
                  params: {
                    attributesToSnippet: ['name:10', 'summary:35'],
                    snippetEllipsisText: '…',
                    hitsPerPage: 5
                  }
                }
              ]
            }).then(results => {
              console.log("Results from Algolia:", results); // Log results
              return results;
            });
          },
            templates: {
              header() {
                return (
                  "Posts"
                );
              },
              item({ item, components, html }) {
                return html`<a class="aa-ItemLink" href="/posts/${item.slug_ag}">
                  <div class="aa-ItemContent">
                    <div class="aa-ItemIcon aa-ItemIcon--alignTop">
                      <a href="/posts/${item.slug.ag}"><img
                        src="${item.photo_main_ag}"
                        alt="${item.name_ag}"
                        width="40"
                        height="40"
                      /></a>
                    </div>
                    <div class="aa-ItemContentBody">
                      <div class="aa-ItemContentTitle">
                        ${components.Snippet({
                          hit: item,
                          attribute: 'name',
                        })}
                      </div>
                      <div class="aa-ItemContentSubtitle">
                        Published in <strong>${item.country_ag}</strong>
                      </div>
                      <div class="aa-ItemContentDescription">
                        ${components.Snippet({
                          hit: item,
                          attribute: 'summary',
                        })}
                      </div>
                    </div>
                  </div>
                </a>`;
              },
              noResults() {
                return "No posts for this query.";
              }
            },
            getItemUrl({ item }) {
              return "/races/" + item.slug_ag;
            },
          }
        ];
      }
    });
  
    console.log("Algolia autocomplete initialized."); // Log completion

    document.addEventListener('keydown', (event) => {
      if (event.metaKey && event.key.toLowerCase() === 'k') {
        setIsOpen(true);
      }
    });
</script>

<script>
  $(document).ready(function() {
  // Listen for click events on the 'filter-open' button.
  $('#filter-open').on('click', function() {
    // Show the modal when the 'filter-open' button is clicked.
    $('#filterForm').show();
  });

  // Listen for click events on the 'filter-close' button.
  $('#filter-close').on('click', function() {
    // Hide the modal when the 'filter-close' button is clicked.
    $('#filterForm').hide();
  });
});
</script>

<script>
  $(document).ready(function() {
    // Get the current page's URL path
    var path = window.location.pathname;

    // Remove any leading or trailing slashes from the path
    path = path.replace(/\/$/, "");
    path = path.substr(1);

    // Find the vertical menu item that corresponds to the current page and add the "active-vertical-menu-item" class
    $(".vertical-menu-item[data-url='" + path + "']").addClass("active-vertical-menu-item");

    // Find the horizontal menu item that corresponds to the current page and add the "active-horizontal-menu-item" class
    $(".horizontal-menu-item[data-url='" + path + "']").addClass("active-horizontal-menu-item");
  });
</script>
  
