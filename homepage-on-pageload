<!-- ############################################ PAGE LOAD ############################################ -->
<!-- This script loads the necessary scripts for the homepage and loads the results from Algolia based on the URL params. It also adds event handlers to the like buttons. -->
<!-- Mapbox styles and scripts -->
<link href='https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.css' rel='stylesheet' />
<script src='https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.js'></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" type="text/css" />
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>

<script>
  // Globals and Configuration
  console.log("Script Initiated");
  const memberstack = window.$memberstackDom;
  let memberJson; // Global variable to hold member data
  const mapboxToken = 'pk.eyJ1IjoibWFnbnVzMTk5MyIsImEiOiJjbGwyOHUxZTcyYTc1M2VwZDhzZGY3bG13In0._jM6tBke0CyM5_udTKGDOQ';
  const algoliaConfig = {
      appId: "CWUIX0EWFE",
      apiKey: "4cd4c82105f395affbc472c07a9789c8",
      indexName: 'treccy_races_all'
  };
  let likeButtonLastClickedAt = 0; // Moved to the outer scope

  // Function to attach click event to like buttons
  function attachLikeButtonEvent() {
    const likeButtons = document.querySelectorAll('.like-button');
    likeButtons.forEach(button => {
      button.addEventListener('click', handleLikeButtonClick);
    });
  }

  // Initialize memberJson once the DOM is fully loaded
  document.addEventListener("DOMContentLoaded", async function() {
      memberJson = await initializeMemberJson();
      console.log("memberJson after initialization: ", memberJson);
      checkAndLoadAlgoliaResults();  // Call it here after memberJson is initialized
  });

  async function initializeMemberJson() {
      const member = await memberstack.getCurrentMember();
      if (!member || !member.data) {
          window.location.href = '/sign-up-auth';
          return;
      }

      let memberJson = await memberstack.getMemberJSON();
      while (memberJson.data) {
          memberJson = memberJson.data;
      }
      return memberJson;
  }

  // Function to handle like button clicks
  function handleLikeButtonClick(event) {
      const now = Date.now();
      if (now - likeButtonLastClickedAt < 500) {
          return;
      }
      likeButtonLastClickedAt = now;

      const likeButton = event.currentTarget;
      const objectId = likeButton.getAttribute('data-object-id');
      likeButton.classList.toggle('is-liked');
      const isLiked = likeButton.classList.contains('is-liked');

      if (isLiked) {
          memberJson.likes.push({ id: objectId, timestamp: Date.now() });
      } else {
          const index = memberJson.likes.findIndex(item => item.id === objectId);
          if (index > -1) {
              memberJson.likes.splice(index, 1);
          }
      }
      console.log("Updated memberJson:", memberJson);
  }


// Function to populate race cards
function populateRaceCards(results, memberJson) {
  console.log("Populating Race Cards...");
  
  if (!memberJson) {
    console.error("memberJson is undefined");
    return;
  }

  const algoliaRacesDiv = document.getElementById('algoliaRaces');

  results.forEach(result => {
    console.log("result.slug_ag:", result.slug_ag);
    const raceCardTemplate = document.getElementById("race-card");
    const newRaceCard = raceCardTemplate.cloneNode(true);
    newRaceCard.removeAttribute('id');
    newRaceCard.style.display = 'block';

    const formattedDate = formatDate(result.date_ag); 
    newRaceCard.querySelector('.race-card-top-block').href = `/races/${result.slug_ag}`;
    newRaceCard.querySelector('.race-card-image').src = result.photo_main_ag;
    newRaceCard.querySelector('.race-card-image').alt = result.name_ag;
    newRaceCard.querySelector('.card-text-link-block').href = `/races/${result.slug_ag}`;
    newRaceCard.querySelector('.race-card-heading').textContent = result.name_ag;
    newRaceCard.querySelector('.race-card-heading-right').textContent = result.distance_ag;
    newRaceCard.querySelector('.race-city-text').textContent = result.city_ag;
    newRaceCard.querySelector('.race-country-text').textContent = result.country_ag; // Changed from city_ag to country_ag
    newRaceCard.querySelector('.race-card-date-text').textContent = formattedDate;

    // Here, we set up the like button
    const likeButton = newRaceCard.querySelector('.like-button');
    likeButton.setAttribute('data-object-id', result.objectID);

    // Check if this object is liked by the user
    if (memberJson.likes && memberJson.likes.some(item => item.id === result.objectID)) {
      likeButton.classList.add('is-liked');
    }
  
    algoliaRacesDiv.appendChild(newRaceCard);
  });
}

// Date formatting function
function formatDate(dateString) {
    const date = new Date(dateString);
    const day = date.getDate();
    const month = date.toLocaleString('en-US', { month: 'short' });
    const year = date.getFullYear().toString().substr(-2);
    const formattedDate = `${day} ${month} ${year}`;
    console.log("Formatted date:", formattedDate);
    return formattedDate;
}

// Function to fetch Algolia Results
async function fetchAlgoliaResults(lat, lng, radius, page = 0) {
  // Initialize an empty array to hold filters
  const filters = [];

  // Your other Algolia configurations
  const client = algoliasearch('YourApplicationID', 'YourSearchOnlyAPIKey');
  const index = client.initIndex('YourIndexName');

  // Iterate through all parameters and build the filters dynamically
  urlSearchParams.forEach((value, key) => {
    if (key === 'view') {
      // Ignore the "view" parameter
      return;
    }

    if (key.startsWith('discipline')) {
      filters.push(`disciplines_ag:${value}`);
    } else if (key === 'minDist') {
      filters.push(`distance_ag >= ${value}`);
    } else if (key === 'maxDist') {
      filters.push(`distance_ag <= ${value}`);
    } else if (key === 'fromDate') {
      // Convert the date to a Unix timestamp
      const fromDateTimestamp = new Date(value).getTime();
      filters.push(`date_ag >= ${fromDateTimestamp}`);
    } else if (key === 'toDate') {
      // Convert the date to a Unix timestamp
      const toDateTimestamp = new Date(value).getTime();
      filters.push(`date_ag <= ${toDateTimestamp}`);
    } else if (key !== 'lat' && key !== 'lng' && key !== 'locationRange') {
      filters.push(`${key}:${value}`);
    }
  });

    // Prepare search parameters
    const searchParams = {
        hitsPerPage: 20,
        filters: filters.join(' AND '),
        page: page
    };

    // Include aroundLatLng and aroundRadius if lat and lng are valid numbers
    if (!isNaN(lat) && !isNaN(lng)) {
        searchParams.aroundLatLng = `${lat},${lng}`;
        if (!isNaN(radius)) {
            searchParams.aroundRadius = radius;
        }
    }

    const searchClient = algoliasearch(algoliaConfig.appId, algoliaConfig.apiKey);
    const index = searchClient.initIndex(algoliaConfig.indexName);

    console.log("Filters being sent to Algolia:", filters);

    // URL encode the filters before building the debug URL
    const encodedFilters = encodeURIComponent(filters.join(' AND '));
    const debugURL = `https://${algoliaConfig.appId}-dsn.algolia.net/1/indexes/${algoliaConfig.indexName}/query?hitsPerPage=20&aroundLatLng=${lat},${lng}&aroundRadius=${radius}&filters=${encodedFilters}`;
    console.log("Debug URL with parameters:", debugURL);

    try {
        const results = await index.search('', searchParams);
        console.log("Algolia Search Results:", results);

        // Update the global algoliaResults variable with the fetched results
        algoliaResults = results.hits;

        return results.hits;
    } catch (error) {
        console.error("An error occurred while fetching Algolia results:", error);
        return [];
    }
}

// Load Algolia Results
  async function loadAlgoliaResultsToDiv(lat, lng, radius, page = 0) {
      const results = await fetchAlgoliaResults(lat, lng, radius, page);
      populateRaceCards(results, memberJson);
      attachLikeButtonEvent(); // Re-attach event listeners after populating cards
  }

// Function to check if there are any URL parameters and load Algolia results
function checkAndLoadAlgoliaResults() {
    const urlSearchParams = new URLSearchParams(window.location.search);
    const lat = parseFloat(urlSearchParams.get('lat'));
    const lng = parseFloat(urlSearchParams.get('lng'));
    const locationRange = parseFloat(urlSearchParams.get('locationRange')); // Parse the locationRange parameter

    if (isNaN(lat) || isNaN(lng)) {
        console.log("Latitude and Longitude parameters are missing or invalid. Continuing without location-based search.");
    }

    if (isNaN(locationRange)) {
        console.log("Location Range parameter is missing or invalid. Continuing with default or no radius.");
    }

    // Call the load function with the parsed lat, lng, and locationRange
    loadAlgoliaResultsToDiv(lat, lng, locationRange);
}

// Variable to keep track of the current page
let currentPage = 0;

// Function to handle scroll event
function handleScroll() {
    // Check if user is at the bottom of the page
    if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 500) {
        // Increment current page
        currentPage++;

        // Fetch and display the next page of Algolia results
        const urlSearchParams = new URLSearchParams(window.location.search);
        const lat = parseFloat(urlSearchParams.get('lat'));
        const lng = parseFloat(urlSearchParams.get('lng'));
        const locationRange = parseFloat(urlSearchParams.get('locationRange'));
        
        loadAlgoliaResultsToDiv(lat, lng, locationRange, currentPage); // Pass the current page number
    }
}

// Add scroll event listener
window.addEventListener('scroll', handleScroll);

</script>
