<script>
// Globals and Configuration
console.log("Script Initiated");

let currentMarkers = [];
const mapboxToken = 'pk.eyJ1IjoibWFnbnVzMTk5MyIsImEiOiJjbGwyOHUxZTcyYTc1M2VwZDhzZGY3bG13In0._jM6tBke0CyM5_udTKGDOQ';
const algoliaConfig = {
    appId: "CWUIX0EWFE",
    apiKey: "4cd4c82105f395affbc472c07a9789c8",
    indexName: 'treccy_races_all'
};

const disciplineMarkers = {
    'swimming': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833f1995f2e23c39eacc_swimming-icon-50.svg',
    'paddling': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d28340c9aa33055043be71_paddling-icon-50.svg',
    'running': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833f7badb96d1c86df8b_running-icon-50.svg',
    'cycling': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833fff1d33088ebee8f4_cycling-icon-50.svg',
    'default': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64ce497c38241ed462982298_favicon32.jpg'
};

// 1) Checks User Location
async function getLocation() {
    console.log("Getting User Location...");
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject('Geolocation is not supported by your browser.');
        } else {
            navigator.geolocation.getCurrentPosition((position) => {
                resolve({
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                });
            }, () => {
                reject('Unable to retrieve your location.');
            });
        }
    });
}

// 2) Searches Algolia
async function fetchAlgoliaResults(lat, lng) {
    console.log("Fetching Algolia Results...");

    const filters = [];
    const searchClient = algoliasearch(algoliaConfig.appId, algoliaConfig.apiKey);
    const index = searchClient.initIndex(algoliaConfig.indexName);

    const disciplineFilterCheckbox = document.getElementById('disciplineFilter_checkbox');
    if (disciplineFilterCheckbox && disciplineFilterCheckbox.checked) {
        const filterValue = disciplineFilterCheckbox.getAttribute('filter-value');
        if (filterValue) {
            filters.push(`Disciplines=${filterValue}`);
        }
    }

    console.log("Filters being sent to Algolia:", filters);
    
    const debugURL = `https://${algoliaConfig.appId}-dsn.algolia.net/1/indexes/${algoliaConfig.indexName}/query?hitsPerPage=20&aroundLatLng=${lat},${lng}&aroundRadius=5000000&filters=${filters.join(' AND ')}`;
    console.log("Debug URL with parameters:", debugURL);

    const results = await index.search('', {
        hitsPerPage: 20,
        aroundLatLng: `${lat},${lng}`,
        aroundRadius: 5000000,
        filters: filters.join(' AND ')
    });

    console.log("Algolia Search Results:", results);
    return results.hits;
}

// 3) Returns results to the algoliaRaces grid
// Date formatting function
function formatDate(dateString) {
    const date = new Date(dateString);
    const day = date.getDate();
    const month = date.toLocaleString('en-US', { month: 'short' });
    const year = date.getFullYear().toString().substr(-2);
    const formattedDate = `${day} ${month} ${year}`;
    
    console.log("Formatted date:", formattedDate);
    return formattedDate;
}

// Load Algolia Results
async function loadAlgoliaResultsToDiv(lat, lng) {
    console.log("Fetching and Displaying Algolia Results in Div...");

    const results = await fetchAlgoliaResults(lat, lng);

    const algoliaRacesDiv = document.getElementById('algoliaRaces');
    algoliaRacesDiv.innerHTML = '';  // Clear any previous data

    results.forEach(result => {
        const formattedDate = formatDate(result.Date); // Format the date using the function

        const raceCardHTML = `
        <div class="race-card">
            <div class="race-card-top-block">
                <a href="/races/${result.slug_ag}" class="race-card-image-link-block w-inline-block">
                    <img src="${result.photo_main_ag}" loading="lazy" alt="${result.name_ag}" class="race-card-image">
                </a>
                <div class="race-discipline-tags-wrapper">
                    <div class="race-discipline-tags-list">
                        <div class="race-discipline-tag-div">
                            <img src="https://global-uploads.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833f7badb96d1c86df8b_running-icon-50.svg" loading="lazy" alt="" class="race-discipline-icon">
                        </div>
                    </div>
                </div>
                <div class="heart-icon-div">
                    <div class="heart-icon w-embed">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" aria-hidden="true" role="presentation" focusable="false">
                            <path d="M16 28c7-4.73 14-10 14-17a6.98 6.98 0 0 0-7-7c-1.8 0-3.58.68-4.95 2.05L16 8.1l-2.05-2.05a6.98 6.98 0 0 0-9.9 0A6.98 6.98 0 0 0 2 11c0 7 7 12.27 14 17z"></path>
                        </svg>
                    </div>
                </div>
            </div>
            <a href="/races/${result.slug_ag}" id="textLinkblock" class="card-text-link-block w-inline-block">
                <div class="race-card-heading-div">
                    <h4 id="raceNameid" class="race-card-heading">${result.name_ag}</h4>
                    <h4 id="raceDistanceid" class="race-card-heading-right">${result.distance_ag}</h4>
                </div>
                <div class="race-card-location-tags">
                    <div class="race-card-location-tags-left-column">
                        <h5 id="raceCityid" class="race-grid-location">${result.city_ag}</h5>
                        <h5 class="race-grid-location comma">,</h5>
                        <h5 id="raceCountryid" class="race-grid-location">${result.country_ag}</h5>
                    </div>
                </div>
                <div id="racecardDate" class="race-card-date-text">${formattedDate}</div>
            </a>
        </div>
    `;
    algoliaRacesDiv.innerHTML += raceCardHTML;
});
}

// 4) Displays results on the map
function removeExistingMarkers() {
    for (const marker of currentMarkers) {
        marker.remove();
    }
    currentMarkers = [];
}

function createMarkerOnMap(map, result) {
    let markerImageUrl;
    if (result.disciplinesag.length === 1) {
        markerImageUrl = disciplineMarkers[result.disciplines_ag[0].toLowerCase()];
    } else {
        // Use a generic marker for multiple disciplines
        markerImageUrl = 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64ce497c38241ed462982298_favicon32.jpg';
    }

    // Creating the disciplines div
    let disciplinesDiv = '';
    result.disciplines_ag.forEach(discipline => {
        disciplinesDiv += `<div class="map-popup-discipline">${discipline}</div>`;
    });

    // Formatted date
    const formattedDate = formatDate(result.Date);

    const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(`
        <div class="map-popup-div">
            <div class="map-popup-image-div">
                <a href="/races/${result.slug_ag}" class="map-popup-link-block w-inline-block">
                    <img src="${markerImageUrl}" loading="lazy" alt="" class="map-popup-image">
                </a>
                <div class="map-popup-discipline-div">${disciplinesDiv}</div>
                <div class="heart-icon-div"><div class="heart-icon w-embed"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" aria-hidden="true" role="presentation" focusable="false">
  <path d="M16 28c7-4.73 14-10 14-17a6.98 6.98 0 0 0-7-7c-1.8 0-3.58.68-4.95 2.05L16 8.1l-2.05-2.05a6.98 6.98 0 0 0-9.9 0A6.98 6.98 0 0 0 2 11c0 7 7 12.27 14 17z"></path>
</svg></div>
                </div>
            </div>
            <a href="/races/${result.slug_ag}" class="link-block w-inline-block">
                <div class="map-popup-header-div">
                    <div class="map-popup-header">${result.name_ag}</div>
                </div>
                <div class="map-popup-country-and-date-div">
                    <div class="map-popup-header-country-div">
                        <div class="map-popup-city-text">${result.city_ag}</div>
                        <div class="map-popup-comma">, </div>
                        <div class="map-popup-country-text">${result.country_ag}</div>
                    </div>
                    <div class="map-popup-date-div">
                        <div class="map-popup-date-text">${formattedDate}</div>
                    </div>
                </div>
            </a>
        </div>
    `);

    const customMarker = new Image(50, 50);
    customMarker.src = markerImageUrl;

    const marker = new mapboxgl.Marker(customMarker)
        .setLngLat([result._geoloc.lng, result._geoloc.lat])
        .setPopup(popup)
        .addTo(map);

    currentMarkers.push(marker);
}



async function displayMapWithResults(lat, lng) {
    console.log("Displaying Map with Results...");
    
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/magnus1993/cll28qk0n006a01pu7y9h0ouv',
        center: [lng, lat],
        zoom: 10,
        accessToken: mapboxToken  
    });

    // Fetch Algolia Results
    const results = await fetchAlgoliaResults(lat, lng);
    
    // Clear any existing markers
    removeExistingMarkers();

    // Display Algolia results on the map
    results.forEach(result => {
        createMarkerOnMap(map, result);
    });

    map.resize();
}

</script>
