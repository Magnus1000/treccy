<script>
// Globals and Configuration
console.log("Script Initiated");

let currentMarkers = [];
const mapboxToken = 'pk.eyJ1IjoibWFnbnVzMTk5MyIsImEiOiJjbGwyOHUxZTcyYTc1M2VwZDhzZGY3bG13In0._jM6tBke0CyM5_udTKGDOQ';
const algoliaConfig = {
    appId: "CWUIX0EWFE",
    apiKey: "4cd4c82105f395affbc472c07a9789c8",
    indexName: 'treccy_races_all'
};

const disciplineMarkers = {
    'swimming': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833f1995f2e23c39eacc_swimming-icon-50.svg',
    'paddling': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d28340c9aa33055043be71_paddling-icon-50.svg',
    'running': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833f7badb96d1c86df8b_running-icon-50.svg',
    'cycling': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833fff1d33088ebee8f4_cycling-icon-50.svg',
    'default': 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64ce497c38241ed462982298_favicon32.jpg'
};

// 1) Checks User Location
async function getLocation() {
    console.log("Getting User Location...");
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject('Geolocation is not supported by your browser.');
        } else {
            navigator.geolocation.getCurrentPosition((position) => {
                resolve({
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                });
            }, () => {
                reject('Unable to retrieve your location.');
            });
        }
    });
}

// 2) Searches Algolia
async function fetchAlgoliaResults(lat, lng) {
    console.log("Fetching Algolia Results...");

    const filters = [];
    const searchClient = algoliasearch(algoliaConfig.appId, algoliaConfig.apiKey);
    const index = searchClient.initIndex(algoliaConfig.indexName);

    const disciplineFilterCheckbox = document.getElementById('disciplineFilter_checkbox');
    if (disciplineFilterCheckbox && disciplineFilterCheckbox.checked) {
        const filterValue = disciplineFilterCheckbox.getAttribute('filter-value');
        if (filterValue) {
            filters.push(`Disciplines=${filterValue}`);
        }
    }

    console.log("Filters being sent to Algolia:", filters);
    
    const debugURL = `https://${algoliaConfig.appId}-dsn.algolia.net/1/indexes/${algoliaConfig.indexName}/query?hitsPerPage=20&aroundLatLng=${lat},${lng}&aroundRadius=5000000&filters=${filters.join(' AND ')}`;
    console.log("Debug URL with parameters:", debugURL);

    const results = await index.search('', {
        hitsPerPage: 20,
        aroundLatLng: `${lat},${lng}`,
        aroundRadius: 5000000,
        filters: filters.join(' AND ')
    });

    console.log("Algolia Search Results:", results);
    return results.hits;
}

// 3) Returns results to the algoliaRaces grid
async function loadAlgoliaResultsToDiv(lat, lng) {
    console.log("Fetching and Displaying Algolia Results in Div...");

    const results = await fetchAlgoliaResults(lat, lng);

    const algoliaRacesDiv = document.getElementById('algoliaRaces');
    algoliaRacesDiv.innerHTML = '';  // Clear any previous data

    results.forEach(result => {
        const disciplines = result.Disciplines.join(', ');

        const raceCardHTML = `
    <div class="race-card">
        <a href="/races/${result.Slug}" id="imageLinkblock" class="race-card-image-link-block w-inline-block" >
            <img src="https://global-uploads.webflow.com/64ccebfb87c59cf5f3e54ed6/64cd3b3ec7904911140a6546_763awew3skd5y0hb3dhh8eh2bx3d3g8k-p-500.png" loading="lazy" id="raceImageid" alt="${result.Name}" class="race-card-image">
        </a>
        <div class="race-discipline-tags-wrapper">
            <div class="race-discipline-tags-list">
                <div class="race-discipline-tag-div">
                    <img src="https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833f1995f2e23c39eacc_swimming-icon-50.svg" loading="lazy" alt="" class="race-discipline-icon">
                </div>
            </div>
        </div>
        <a href="/races/${result.Slug}" id="textLinkblock" class="card-text-link-block w-inline-block">
            <div class="race-card-heading-div">
                <h4 id="raceNameid" class="race-card-heading">${result.Name}</h4>
                <h4 id="raceDistanceid" class="race-card-heading-right">69km</h4>
            </div>
            <div class="race-card-location-tags">
                <div class="race-card-location-tags-left-column">
                    <h5 id="raceCityid" class="race-grid-location">${result.City}</h5>
                    <h5 class="race-grid-location comma">,</h5>
                    <h5 id="raceCountryid" class="race-grid-location">${result.Country}</h5>
                </div>
            </div>
            <div id="racecardDate" class="race-card-date-text">${result.Date}</div>
        </a>
    </div>
`;

algoliaRacesDiv.innerHTML += raceCardHTML;
    });
}

// 4) Displays results on the map
function removeExistingMarkers() {
    for (const marker of currentMarkers) {
        marker.remove();
    }
    currentMarkers = [];
}

function createMarkerOnMap(map, result) {
    let markerImageUrl;
    if (result.Disciplines.length === 1) {
        markerImageUrl = disciplineMarkers[result.Disciplines[0].toLowerCase()];
    } else {
        // Use a generic marker for multiple disciplines
        markerImageUrl = 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64ce497c38241ed462982298_favicon32.jpg';
    }

    const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(`
        <div>
            <h4>${result.Name}</h4>
            <p>${result.Description}</p>
            <p><strong>Discipline:</strong> ${result.Disciplines.join(', ')}</p>
            <p><strong>State/Province:</strong> ${result.State_Province}</p>
            <a href="/races/${result.Slug}">More details</a>
        </div>
    `);

    const customMarker = new Image(50, 50);
    customMarker.src = markerImageUrl;

    const marker = new mapboxgl.Marker(customMarker)
        .setLngLat([result._geoloc.lng, result._geoloc.lat])
        .setPopup(popup)
        .addTo(map);

    currentMarkers.push(marker);
}


async function displayMapWithResults(lat, lng) {
    console.log("Displaying Map with Results...");
    
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/magnus1993/cll28qk0n006a01pu7y9h0ouv',
        center: [lng, lat],
        zoom: 10,
        accessToken: mapboxToken  
    });

    // Fetch Algolia Results
    const results = await fetchAlgoliaResults(lat, lng);
    
    // Clear any existing markers
    removeExistingMarkers();

    // Display Algolia results on the map
    results.forEach(result => {
        createMarkerOnMap(map, result);
    });

    map.resize();
}

// 5) Listens to the toggle events to hide/display the map and grid
document.getElementById('showMap').addEventListener('click', async function() {
    console.log("Show Map Button Clicked...");

    const mapContainer = document.getElementById('map');
    mapContainer.style.display = 'flex';  // Show the map container

    const showListrow = document.getElementById('showListrow');
    showListrow.style.display = 'flex';  // Show the Show List row

    const showMaprow = document.getElementById('showMaprow');
    showMaprow.style.display = 'none';  // Hide the Show Map row

    const raceListgrid = document.getElementById('raceListgrid');
    raceListgrid.style.display = 'none';  // Hide the race list grid

    const footer = document.getElementById('footer');
    raceListgrid.style.display = 'none';  // Hide the footer

    const userLocation = await getLocation();
    displayMapWithResults(userLocation.lat, userLocation.lng);

    // Assuming your Mapbox GL JS map object is named 'map'
    map.resize();
});

document.getElementById('showList').addEventListener('click', async function() {
    console.log("Show List Button Clicked...");

    const mapContainer = document.getElementById('map');
    mapContainer.style.display = 'none';  // Hide the map container

    const showListrow = document.getElementById('showMaprow');
    showListrow.style.display = 'flex';  // Show the Show Map row

    const showMaprow = document.getElementById('showListrow');
    showMaprow.style.display = 'none';  // Hide the Show List row

    const raceListgrid = document.getElementById('raceListgrid');
    raceListgrid.style.display = 'flex';  // Show the race list grid

    const footer = document.getElementById('footer');
    raceListgrid.style.display = 'flex';  // Show the footer

});

// 6) Check the URL parameters and preset the filter if there are any filters already set
function checkAndPresetFilters() {
  console.log("Checking and Presetting Filters from URL Params...");

  const urlSearchParams = new URLSearchParams(window.location.search);

  // Handle discipline filters (can be multiple)
  Array.from(urlSearchParams.keys()).forEach(key => {
    if (key.startsWith('discipline')) {
      const disciplineValue = urlSearchParams.get(key);
      const checkbox = document.querySelector(`input[filter-value='${disciplineValue}']`);
      if (checkbox) {
        checkbox.checked = true;
        const parentLabel = checkbox.closest(".w-checkbox.checkbox-buttons");
        parentLabel.classList.add("active-filter");
      }
    }
  });

  // Handle minDist filter
  const minDist = urlSearchParams.get('minDist');
  if (minDist) {
    const minDistInput = document.getElementById('minimum-distance');
    if (minDistInput) {
      minDistInput.value = minDist;
    }
  }

  // Handle maxDist filter
  const maxDist = urlSearchParams.get('maxDist');
  if (maxDist) {
    const maxDistInput = document.getElementById('maximum-distance');
    if (maxDistInput) {
      maxDistInput.value = maxDist;
    }
  }

  // Handle locationRange filter
  const locationRange = urlSearchParams.get('locationRange');
  if (locationRange) {
    const locationRangeInput = document.getElementById('location_range');
    if (locationRangeInput) {
      locationRangeInput.value = locationRange;
    }
  }

  // Handle fromDate filter
  const fromDate = urlSearchParams.get('fromDate');
  if (fromDate) {
    const fromDateInput = document.getElementById('dateFrom');
    if (fromDateInput) {
      fromDateInput.value = fromDate;
    }
  }

  // Handle toDate filter
  const toDate = urlSearchParams.get('toDate');
  if (toDate) {
    const toDateInput = document.getElementById('dateTo');
    if (toDateInput) {
      toDateInput.value = toDate;
    }
  }

  // Handle location filter
  const location = urlSearchParams.get('location');
  const lat = urlSearchParams.get('lat');
  const lon = urlSearchParams.get('lon');
  if (location) {
    const searchBarElement = document.getElementById('search-bar');
    if (searchBarElement) {
      searchBarElement.value = location;
      if (lat) searchBarElement.setAttribute('data-lat', lat);
      if (lon) searchBarElement.setAttribute('data-lon', lon);
    }
  }
}

</script>
