<!-- ############################################ EVENT LISTENERS 2 ############################################ -->
<!-- This script contains the logic to add the filters to the URL params. It also contains the logic to create the email sign-up and send the URL params in the Webhook request body.  -->
<script>
  // Function to get element value by ID
  function getElementValue(id) {
    return document.getElementById(id).value;
  }

  // Debug and get date range from the date picker input
  function debugAndGetDateRange() {
    const dateRange = $('input[name="datefilter"]').val();
    console.log("Debugging date range:", dateRange); // Log the date range

    if (!dateRange) {
      return { fromDate: '', toDate: '' };
    }

    const [fromDate, toDate] = dateRange.split(' - ');
    console.log("Debugging fromDate:", fromDate); // Log fromDate
    console.log("Debugging toDate:", toDate); // Log toDate

    return { fromDate, toDate };
  }

  // Function to update URL params with filters
  function updateURLWithFilters() {
    const selectedDisciplines = Array.from(document.querySelectorAll('.disciplinefilter_checkbox'))
      .filter(checkbox => checkbox.checked)
      .map(checkbox => checkbox.getAttribute('filter-value'));

    console.log('Selected discipline filters:', selectedDisciplines);

    const { fromDate, toDate } = debugAndGetDateRange();

    const filters = {
      minDist: getElementValue('minimum-distance'),
      maxDist: getElementValue('maximum-distance'),
      locationRange: getElementValue('location_range'),
      fromDate,
      toDate,
      type: document.querySelector('input[name="type"]:checked')?.value,
      location: getElementValue('location-search-bar'),
      lat: document.getElementById('location-search-bar').getAttribute('data-lat'),
      lng: document.getElementById('location-search-bar').getAttribute('data-lon'),
    };

    let params = new URLSearchParams();

    selectedDisciplines.forEach((discipline, index) => {
      params.append(`discipline${index}`, discipline);
    });

    for (const [key, value] of Object.entries(filters)) {
      if (value) params.set(key, value);
    }

    console.log('Final URL parameters:', params.toString());
    history.pushState({}, '', '?' + params.toString());
  }

  // Update the URL without causing a page reload
  history.pushState({}, '', '?' + params.toString());
}

function showFilterForm() {
  const filterFormDiv = document.getElementById('filterForm');
  const filtersModalDiv = document.getElementById('filters-modal');
  
  if (filterFormDiv) {
    filterFormDiv.style.display = 'flex'; // Hide the entire filterForm div
  }

  if (filtersModalDiv) {
    filtersModalDiv.style.display = 'flex'; // Ensure that filters-modal div stays visible
  }
}

function hideFilterForm() {
  const filterFormDiv = document.getElementById('filterForm');
  const filtersModalDiv = document.getElementById('filters-modal');
  
  if (filterFormDiv) {
    filterFormDiv.style.display = 'none'; 
  }

  if (filtersModalDiv) {
    filtersModalDiv.style.display = 'flex'; 
  }
}

document.getElementById('filter-open').addEventListener('click', showFilterForm);
document.getElementById('filter-open-mobile').addEventListener('click', showFilterForm);
document.getElementById('filter-close').addEventListener('click', hideFilterForm);

//Add classes to Show and Hide Email Signup
function toggleEmailClasses() {
  // Get the div elements by class name
  const emailFieldDiv = document.getElementById('email-signup-field');
  const emailButtonTextDiv = document.getElementById('email-submit-button-text');
  const emailButtonDiv = document.getElementById('subscribe-to-notifications-button');

  // Check if the elements are found
  if (emailFieldDiv && emailButtonTextDiv) {
    // Toggle the active class for both divs
    emailFieldDiv.classList.toggle('active');
    emailButtonTextDiv.classList.toggle('active');
    emailButtonDiv.classList.toggle('active');
  } else {
    console.warn('Email elements not found');
  }
}

// Add an event listener to the form with id="filterForm"
document.getElementById('filterForm').addEventListener('submit', function(event) {
  // Prevent the default form submission behavior
  event.preventDefault();

    // Call the function to hide the filter form div
    hideFilterForm();

    // Call the function to update URL with filters
    updateURLWithFilters();

    // Check if there are any URL parameters and load Algolia results
    checkAndLoadAlgoliaResults();
});

// Function to get the email from the form
function getEmail() {
  const emailElement = document.getElementById('email-signup-field');
  return emailElement ? emailElement.value : '';
}

// Function to validate email format
function isValidEmail(email) {
  const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  return regex.test(email);
}

// Function to validate email in real-time
function checkEmailRealTime() {
  const emailElement = document.getElementById('email-signup-field');
  const feedbackElement = document.getElementById('email-feedback');
  if (!feedbackElement) {
    console.warn('Feedback element not found');
    return; // Exit if the feedback element is not found
  }
  if (isValidEmail(emailElement.value)) {
    feedbackElement.style.display = 'none';
  } else {
    feedbackElement.style.display = 'block';
    feedbackElement.textContent = 'Invalid email format';
  }
}

function getQueryParams() {
  const params = {};
  const queryString = window.location.search.substring(1);
  const pairs = queryString.split('&');
  for (const pair of pairs) {
    const [key, value] = pair.split('=');
    params[decodeURIComponent(key)] = decodeURIComponent(value);
  }
  return params;
}


function sendWebhook(email, params) {
  // Check if the email is valid
  if (!isValidEmail(email)) {
    console.error('Invalid email:', email);
    return; // Exit the function if the email is not valid
  }

  // Construct the payload with email and parameters
  const payload = {
    email,
    params
  };

  // Webhook URL
  const url = 'https://hook.us1.make.com/chr1792n4xwbkd96ea3zhcdmnn9khntl';

   // Send a POST request to the webhook
  fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
  })
  .then(response => response.text())
  .then(data => {
    console.log('Webhook response:', data);
  }); 
}

// Event listener for real-time email validation
document.getElementById('email-signup-field').addEventListener('input', checkEmailRealTime);

// Event listener for the button click
document.getElementById('subscribe-to-notifications-button').addEventListener('click', function() {
  const emailFieldDiv = document.getElementById('email-signup-field');
  const emailButtonDiv = document.getElementById('subscribe-to-notifications-button');

  // If email field is not active, or if it's active and empty, toggle the active state
  if (!emailFieldDiv.classList.contains('active') || (emailFieldDiv.classList.contains('active') && emailFieldDiv.value === '')) {
    // Toggle the active state if email field is not active or if it's active and empty
    toggleEmailClasses();
  } else {
    // Process the email if the field is active and not empty
    const email = getEmail();
    if (!isValidEmail(email)) {
      console.error('Invalid email:', email);
      return;
    }
    const params = getQueryParams(); // Assuming you have a getQueryParams function to get URL parameters
    console.log('Sending webhook with email:', email, 'and parameters:', params);
    sendWebhook(email, params);

    // Clear the email field
    document.getElementById('email-signup-field').value = '';

    // Call the function to toggle classes
    toggleEmailClasses();
  }
});

</script>
