<!-- ############################################ EVENT LISTENERS 2 ############################################ -->
<script>

const searchInput = document.getElementById('location-search-bar');
const suggestionsBox = document.getElementById('suggestions');

// Attach event listener to search input
searchInput.addEventListener('input', (e) => {
    const query = e.target.value.trim();

    if (query === "") {
        suggestionsBox.innerHTML = "";
        suggestionsBox.classList.remove('active'); // Hide suggestions
        return; // Exit if the query is empty
    }

    // Call the Mapbox Geocoding endpoint
    fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${query}.json?access_token=${mapboxToken}&types=place,region,country`)
        .then(response => response.json())
        .then(data => {
            // Check if features are available
            if (data.features && data.features.length > 0) {
                suggestionsBox.classList.add('active'); // Show suggestions
                suggestionsBox.innerHTML = "";

                const suggestions = data.features;
                suggestions.forEach(suggestion => {
                    // Create suggestion text
                    const placeName = suggestion.place_name;
                    const suggestionItem = document.createElement('div');
                    suggestionItem.classList.add('suggestion-item'); // Assign class
                    
                    // Create and add location icon
                    const iconElement = document.createElement('img');
                    iconElement.src = 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64d2833fff1d33088ebee8f4_cycling-icon-50.svg'; // Change this path
                    suggestionItem.appendChild(iconElement);

                    suggestionItem.appendChild(document.createTextNode(placeName));
                    suggestionsBox.appendChild(suggestionItem);

                    // Add click event listener to each suggestion
                    suggestionItem.addEventListener('click', () => {
                        // Populate the search bar with the selected suggestion
                        searchInput.value = placeName;
                        // Store latitude and longitude as attributes
                        searchInput.setAttribute('data-lat', suggestion.geometry.coordinates[1]);
                        searchInput.setAttribute('data-lon', suggestion.geometry.coordinates[0]);
                        // Clear the suggestions
                        suggestionsBox.innerHTML = "";
                        suggestionsBox.classList.remove('active'); // Hide suggestions
                    });
                });
            } else {
                suggestionsBox.classList.remove('active'); // Hide suggestions
            }
        })
        .catch(error => console.error(error));
});

// Function to get element value by ID
function getElementValue(id) {
  return document.getElementById(id).value;
}

// Update URL params with filters
function updateURLWithFilters() {
  // Get discipline values from checked checkboxes
  const selectedDisciplines = Array.from(document.querySelectorAll('.disciplinefilter_checkbox'))
    .filter(checkbox => checkbox.checked)
    .map(checkbox => checkbox.getAttribute('filter-value'));

  // Log the selected disciplines to the console
  console.log('Selected discipline filters:', selectedDisciplines);

  // Filters collection
  const filters = {
    minDist: getElementValue('minimum-distance'),
    maxDist: getElementValue('maximum-distance'),
    locationRange: getElementValue('location_range'),
    fromDate: getElementValue('dateFrom'),
    toDate: getElementValue('dateTo'),
    type: document.querySelector('input[name="type"]:checked')?.value,
    location: getElementValue('location-search-bar'),
    lat: document.getElementById('location-search-bar').getAttribute('data-lat'),
    lng: document.getElementById('location-search-bar').getAttribute('data-lon'),
  };

  let params = new URLSearchParams();

  // Add selected disciplines to URL parameters
  selectedDisciplines.forEach((discipline, index) => {
    params.append(`discipline${index}`, discipline);
  });

  // Add other filters to URL parameters
  for (const [key, value] of Object.entries(filters)) {
    if (value) params.set(key, value);
  }

  // Log the final parameters to the console
  console.log('Final URL parameters:', params.toString());

  // Update the URL without causing a page reload
  history.pushState({}, '', '?' + params.toString());
}

function showFilterForm() {
  const filterFormDiv = document.getElementById('filterForm');
  const filtersModalDiv = document.getElementById('filters-modal');
  
  if (filterFormDiv) {
    filterFormDiv.style.display = 'flex'; // Hide the entire filterForm div
  }

  if (filtersModalDiv) {
    filtersModalDiv.style.display = 'flex'; // Ensure that filters-modal div stays visible
  }
}

function hideFilterForm() {
  const filterFormDiv = document.getElementById('filterForm');
  const filtersModalDiv = document.getElementById('filters-modal');
  
  if (filterFormDiv) {
    filterFormDiv.style.display = 'none'; // Hide the entire filterForm div
  }

  if (filtersModalDiv) {
    filtersModalDiv.style.display = 'flex'; // Ensure that filters-modal div stays visible
  }
}

document.getElementById('filter-open').addEventListener('click', showFilterForm);
document.getElementById('filter-close').addEventListener('click', hideFilterForm);

// Add an event listener to the form with id="filterForm"
document.getElementById('filterForm').addEventListener('submit', function(event) {
  // Prevent the default form submission behavior
  event.preventDefault();

    // Call the function to hide the filter form div
    hideFilterForm();

    // Call the function to update URL with filters
    updateURLWithFilters();

    // Check if there are any URL parameters and load Algolia results
    checkAndLoadAlgoliaResults();
});

// Function to get the email from the form
function getEmail() {
  const emailElement = document.getElementById('email-signup-field');
  return emailElement ? emailElement.value : '';
}

// Function to validate email format
function isValidEmail(email) {
  const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  return regex.test(email);
}

// Function to validate email in real-time
function checkEmailRealTime() {
  const emailElement = document.getElementById('email-signup-field');
  const feedbackElement = document.getElementById('email-feedback');
  if (isValidEmail(emailElement.value)) {
    feedbackElement.style.display = 'none';
  } else {
    feedbackElement.style.display = 'block';
    feedbackElement.textContent = 'Invalid email format';
  }
}

// Function to send the webhook
function sendWebhook(email, params) {
  // Check if the email is valid
  if (!isValidEmail(email)) {
    console.error('Invalid email:', email);
    return; // Exit the function if the email is not valid
  }

  // Construct the payload with email and parameters
  const payload = {
    email,
    params
  };

  // Webhook URL
  const url = 'https://hook.us1.make.com/chr1792n4xwbkd96ea3zhcdmnn9khntl';

   // Send a POST request to the webhook
  fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
  })
  .then(response => response.text())
  .then(data => {
    console.log('Webhook response:', data);
}

// Event listener for real-time email validation
document.getElementById('email-signup-field').addEventListener('input', checkEmailRealTime);

// Event listener for the button click
document.getElementById('subscribe-to-notifications-button').addEventListener('click', function() {
  const email = getEmail();
  if (!isValidEmail(email)) {
    console.error('Invalid email:', email);
    return;
  }
  const params = getQueryParams(); // Assuming you have a getQueryParams function to get URL parameters
  console.log('Sending webhook with email:', email, 'and parameters:', params);
  sendWebhook(email, params);
});

</script>
