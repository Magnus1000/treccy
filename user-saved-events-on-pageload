<script>
// Common API Key for Airtable
const API_KEY = 'keyEiGPuqmRTtXcZ0';

// Function to format date
function formatDate(dateString) {
  const date = new Date(dateString);
  const day = date.getDate();
  const month = date.toLocaleString('en-US', { month: 'short' });
  const year = date.getFullYear().toString().substr(-2);
  const formattedDate = `${day} ${month} ${year}`;
  console.log("Formatted date:", formattedDate);
  return formattedDate;
}

// Function to fetch additional details from Airtable for each record in 'saved_events_at'
async function fetchEventDetails(eventId) {
  const EVENT_API_URL = `https://api.airtable.com/v0/app1buEm2yEqxilPh/tblS5SD7MxfZUl3wf/${eventId}`;
  
  const headers = new Headers({
    'Authorization': `Bearer ${API_KEY}`
  });

  try {
    const response = await fetch(EVENT_API_URL, { headers });
    console.log(`Fetching from: ${EVENT_API_URL}`);
    console.log("Fetch Event Details Response:", response);

    if (response.ok) {
      const data = await response.json();
      return data.fields;
    } else {
      console.log("Failed to fetch event details:", response.status);
      return null;
    }
  } catch (error) {
    console.log("An error occurred:", error);
    return null;
  }
}

// Function to populate race cards
function populateRaceCards(results) {
  const algoliaRacesDiv = document.getElementById('algoliaRaces');
  
  results.forEach(result => {
    const raceCardTemplate = document.getElementById("race-card");
    const newRaceCard = raceCardTemplate.cloneNode(true);
  
    newRaceCard.removeAttribute('id');
    newRaceCard.style.display = 'block';
  
    const formattedDate = formatDate(result.start_date_at);  // Call date formatting function

    newRaceCard.querySelector('.race-card-top-block').href = `/races/${result.slug_at}`;
    newRaceCard.querySelector('.race-card-image').src = result.photo_main_at;
    newRaceCard.querySelector('.race-card-image').alt = result.name_at;
    newRaceCard.querySelector('.card-text-link-block').href = `/races/${result.slug_at}`;
    newRaceCard.querySelector('.race-card-heading').textContent = result.name_at;
    newRaceCard.querySelector('.race-card-heading-right').textContent = result.item_id_at;
    newRaceCard.querySelector('.race-city-text').textContent = result.city_at;
    newRaceCard.querySelector('.race-country-text').textContent = result.country_text_at;
    newRaceCard.querySelector('.race-card-date-text').textContent = formattedDate;
  
    algoliaRacesDiv.appendChild(newRaceCard);
  });
}

// Existing function to fetch 'saved_events_at'
async function fetchFromAirtable(id) {
  const API_URL = `https://api.airtable.com/v0/app1buEm2yEqxilPh/tblDiS6ivTOlm7nZ8?filterByFormula={user_id_at}="${id}"&fields[]=saved_events_at`;
  
  const headers = new Headers({
    'Authorization': `Bearer ${API_KEY}`
  });

  try {
    const response = await fetch(API_URL, { headers });
    if (response.ok) {
      const data = await response.json();
      if (data.records && data.records.length > 0) {
        const savedEvents = data.records[0].fields.saved_events_at;
        console.log("Saved Events:", savedEvents);
        
        const allEventData = [];

        for (const eventId of savedEvents) {
          const eventData = await fetchEventDetails(eventId);
          if (eventData) {
            allEventData.push(eventData);
          }
        }

        populateRaceCards(allEventData);
      } else {
        console.log("No matching records found.");
      }
    } else {
      console.log("Failed to fetch from Airtable:", response.status);
    }
  } catch (error) {
    console.log("An error occurred:", error);
  }
}

// Get member ID and then fetch data from Airtable
window.$memberstackDom.getCurrentMember().then(({ data: member }) => {   
  if (member) {
    let id = member.id;
    fetchFromAirtable(id);
  }
});

</script>
