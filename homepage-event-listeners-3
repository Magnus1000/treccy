<script>
  document.addEventListener('DOMContentLoaded', async (event) => {
    const memberstack = window.$memberstackDom;
    const likeButtons = document.querySelectorAll('.like-button');

    likeButtons.forEach(likeButton => {
      let likeButtonLastClickedAt = 0;

      likeButton.addEventListener('click', async function () {
        const now = Date.now();
        if (now - likeButtonLastClickedAt < 500) {
          return;
        }
        likeButtonLastClickedAt = now;

        // Optimistically update the UI
        const dataObjectID = this.getAttribute('data-object-id');
        if (this.classList.contains('is-liked')) {
          this.classList.remove('is-liked');
        } else {
          this.classList.add('is-liked');
        }

        // Get the current member
        let member = await memberstack.getCurrentMember();

        // If the member is not logged in, redirect to /sign-up-auth
        if (!member || !member.data) {
          window.location.href = '/sign-up-auth';
          return;
        }

        // Get current member's JSON
        let memberJson = await memberstack.getMemberJSON();

        // Unwrap unnecessary "data" objects
        while (memberJson.data) {
          memberJson = memberJson.data;
        }

        // Create the likes array if it doesn't exist
        if (!memberJson.likes) {
          memberJson.likes = [];
        }

        // Check if dataObjectID is already in the array, if not, add it
        if (!memberJson.likes.includes(dataObjectID)) {
          memberJson.likes.push(dataObjectID);
        } else {
          // If the item is already liked, remove it from the array
          memberJson.likes = memberJson.likes.filter(item => item !== dataObjectID);
        }

        // Update member's JSON asynchronously
        memberstack.updateMemberJSON({ json: memberJson }).catch((error) => {
          console.error("Failed to update member JSON: ", error);
          // If there was an error updating the JSON, revert the button style
          if (this.classList.contains('is-liked')) {
            this.classList.remove('is-liked');
          } else {
            this.classList.add('is-liked');
          }
        });
      });

      // Initialize button states based on the member's likes
      (async function initButtonState() {
        // Get the current member
        let member = await memberstack.getCurrentMember();

        // If the member is not logged in, do nothing
        if (!member || !member.data) {
          return;
        }

        let memberJson = await memberstack.getMemberJSON();

        // Unwrap unnecessary "data" objects
        while (memberJson.data) {
          memberJson = memberJson.data;
        }

        let dataObjectID = likeButton.getAttribute('data-object-id');

        // If the member has already liked the item, style the button as 'is-liked'
        if (memberJson.likes && memberJson.likes.includes(dataObjectID)) {
          likeButton.classList.add('is-liked');
        }
      })();
    });
  });
</script>
