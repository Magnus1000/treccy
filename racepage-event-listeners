<script>
document.addEventListener('DOMContentLoaded', (event) => {
    const memberstack = window.$memberstackDom;
    let likeButtons = document.querySelectorAll('.like-button');

    likeButtons.forEach(likeButton => {
        let likeButtonLastClickedAt = 0;

        likeButton.addEventListener('click', async function () {
            const now = Date.now();
            if (now - likeButtonLastClickedAt < 500) {
                return;
            }
            likeButtonLastClickedAt = now;

            const algoliaObjectID = this.getAttribute('data-object-id');
            this.classList.toggle('is-liked');  // A more concise way to toggle the class

            let member = await memberstack.getCurrentMember();
            if (!member || !member.data) {
                window.location.href = '/sign-up-auth';
                return;
            }

            let memberJson = await memberstack.getMemberJSON();
            while (memberJson.data) {
                memberJson = memberJson.data;
            }

            if (!memberJson.likes) {
                memberJson.likes = [];
            }

            // Find the index of the object with the corresponding algoliaObjectID
            const index = memberJson.likes.findIndex(item => item.id === algoliaObjectID);

            // If not found, add it, otherwise remove it
            if (index === -1) {
                memberJson.likes.push({ id: algoliaObjectID, timestamp: Date.now() });
            } else {
                memberJson.likes.splice(index, 1);
            }

            memberstack.updateMemberJSON({ json: memberJson }).catch((error) => {
                console.error("Failed to update member JSON: ", error);
                this.classList.toggle('is-liked');  // Toggle the class back if the update fails
            });
        });

        (async function initButtonState() {
            let member = await memberstack.getCurrentMember();
            if (!member || !member.data) {
                return;
            }

            let memberJson = await memberstack.getMemberJSON();
            while (memberJson.data) {
                memberJson = memberJson.data;
            }

            let algoliaObjectID = likeButton.getAttribute('data-object-id');
            const isLiked = memberJson.likes && memberJson.likes.some(item => item.id === algoliaObjectID);
            if (isLiked) {
                likeButton.classList.add('is-liked');
            }
        })();
    });
});
</script>

<script>
// Function to open the modal
function openModal() {
  const modal = document.getElementById('claim-race-modal');
  modal.style.display = 'block';
}

// Function to close the modal
function closeModal() {
  const modal = document.getElementById('claim-race-modal');
  modal.style.display = 'none';
}

// Attaching the click event to the open button
const button = document.getElementById('added_by_treccy');
button.addEventListener('click', openModal);

// Attaching the click event to the close button
const closeButton = document.getElementById('close_claim_modal');
closeButton.addEventListener('click', closeModal);

</script>

<script>
  // Function to go back in the user's history
  function goBack() {
    // Go back one step in the browser's history
    window.history.back();
      
    // Log to console
    console.log("Back button was clicked.");
  }
    
  // Adding an event listener to the button with ID 'backButton'
  document.getElementById("backButton").addEventListener("click", goBack);
</script>

<script>
  // Close all modals with the class 'popup-modal-wrapper'
  function closeModal() {
    const modals = document.querySelectorAll('.popup-modal-wrapper');
    modals.forEach(modal => {
      modal.style.display = 'none';
    });
    console.log('Closed all modals');
  }

  // Show Modal based on data-item attribute
  function showModal(event) {
    const itemID = event.target.getAttribute('data-item');
    const modal = document.getElementById(itemID);
    modal.style.display = 'flex';
    console.log(`Showing modal with ID: ${itemID}`);
  }

  // Add event listeners to all buttons with the ID 'seeMoreButton' to open modals
  document.querySelectorAll('.button-outline-small').forEach(button => {
    button.addEventListener('click', showModal);
  });

  // Add event listeners to all divs with the class 'close-modal' to close modals
  document.querySelectorAll('.exit-cross-div').forEach(button => {
    button.addEventListener('click', closeModal);
  });
</script>

<script type="text/javascript">
$(document).ready(function () {
  // Targeting class of .strava-embed
  $(".strava-embed").each(function () {
    $(this).hide(); // Hide so code is not displayed (better to hide in CSS)
    $(this).html(he.decode($(this).html())); // Decode the text
    $(this).show(); // Show the decoded element
  });
});
</script>
