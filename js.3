<script>
// Checkbox Styling
function initializeCheckboxStyling() {
    console.log("Adjusting Checkbox Styling...");

    function updateCheckboxStyling() {
        const spanElement = this.nextElementSibling;
        const parentLabel = spanElement.closest(".w-checkbox.checkbox-buttons");
        if (this.checked) {
            parentLabel.classList.add("active-filter");
        } else {
            parentLabel.classList.remove("active-filter");
        }
    }

    const checkboxes = document.querySelectorAll(".w-checkbox.checkbox-buttons input[type='checkbox']");
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener("change", updateCheckboxStyling);
        updateCheckboxStyling.call(checkbox);
    });
}

// Update URL params with filters 
function updateURLWithFilters() {
    // Initialize URLSearchParams object
    const params = new URLSearchParams(window.location.search);

    // Get all selected discipline checkboxes
    const selectedDisciplines = Array.from(document.querySelectorAll('input[name="disciplineFilter_checkbox"]:checked')).map(checkbox => checkbox.value);
    const disciplinesString = selectedDisciplines.join(',');
    if (disciplinesString) {
        params.set('discipline', disciplinesString);
    }

    // Distance filters
    const minimumDistance = document.getElementById('minimum-distance').value;
    const maximumDistance = document.getElementById('maximum-distance').value;

    // Location range filter
    const locationRange = document.getElementById('location_range').value;

    // Date filters
    const dateFrom = document.getElementById('dateFrom').value;
    const dateTo = document.getElementById('dateTo').value;

    // Location search bar value
    
    // Get the search input element
    const searchBarElement = document.getElementById('search-bar');
    
    // Get the value and lat-lon attributes
    const searchBarValue = searchBarElement.value;
    const searchBarLat = searchBarElement.getAttribute('data-lat');
    const searchBarLon = searchBarElement.getAttribute('data-lon');

    let params = new URLSearchParams();

    if (disciplineFilterCheckbox && disciplineFilterCheckbox.checked) {
        const filterValue = disciplineFilterCheckbox.getAttribute('filter-value');
        params.set('discipline', filterValue);
    }

    if (minimumDistance) {
        params.set('minDist', minimumDistance);
    }

    if (maximumDistance) {
        params.set('maxDist', maximumDistance);
    }

    if (locationRange) {
        params.set('locationRange', locationRange);
    }

    if (dateFrom) {
        params.set('fromDate', dateFrom);
    }

    if (dateTo) {
        params.set('toDate', dateTo);
    }
    
    if (searchBarValue) {
        params.set('location', searchBarValue);
    }

    if (searchBarLat && searchBarLon) {
        params.set('lat', searchBarLat);
        params.set('lon', searchBarLon);
    }

    // Update the URL without causing a page reload
    history.pushState({}, '', '?' + params.toString());
}
</script>

<script>
// Function to get the query parameters from the URL
function getQueryParams() {
  const queryParams = {};
  const queryString = window.location.search.substring(1);
  const pairs = queryString.split('&');
  pairs.forEach(pair => {
    const [key, value] = pair.split('=');
    queryParams[key] = decodeURIComponent(value);
  });
  return queryParams;
}

// Function to get the email from the form
function getEmail() {
  // Assuming that the email field has an ID 'email'
  const emailElement = document.getElementById('email');
  return emailElement ? emailElement.value : '';
}

// Function to validate email format
function isValidEmail(email) {
  // Regular expression to check the email format
  const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  return regex.test(email);
}

// Function to send the webhook
function sendWebhook(email, params) {
  // Check if the email is valid
  if (!isValidEmail(email)) {
    console.error('Invalid email:', email);
    return; // Exit the function if the email is not valid
  }

  // Construct the payload with email and parameters
  const payload = {
    email,
    params
  };

  // Webhook URL
  const url = 'https://hook.us1.make.com/chr1792n4xwbkd96ea3zhcdmnn9khntl';

   // Send a POST request to the webhook
  fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
  })
  .then(response => response.text())
  .then(data => {
    console.log('Webhook response:', data);

    // Show the success message
    const successMessage = document.getElementById('success-message-slide-in');
    if (successMessage) {
      successMessage.style.display = 'block';

      // Hide the success message after 5 seconds (5000 milliseconds)
      setTimeout(() => {
        successMessage.style.display = 'none';
      }, 5000);
    }
  })
  .catch(error => console.error('Error sending webhook:', error));
}

// Assuming the form containing the email input has the ID 'email-form'
document.getElementById('email-form').addEventListener('submit', function(e) {
  // Prevent the default form submission behavior
  e.preventDefault();
});

document.getElementById('submit_email_initial').addEventListener('click', function() {
  // Get the email from the form
  const email = getEmail();
  
  // Get the URL parameters
  const params = getQueryParams();

  // Log the details to the console
  console.log('Sending webhook with email:', email, 'and parameters:', params);

  // Send the webhook
  sendWebhook(email, params);
});
</script>

<script>
document.getElementById('copy_to_clipboard').addEventListener('click', function() {
  // Get the current page's URL
  const urlToCopy = window.location.href;

  // Use the Clipboard API to write the URL to the clipboard
  navigator.clipboard.writeText(urlToCopy).then(() => {
    console.log('URL copied to clipboard:', urlToCopy);
  }).catch(err => {
    console.error('Failed to copy URL to clipboard:', err);
  });

  // Get the popup element by ID
  const popup = document.getElementById('copy_to_clipboard_popin_slider');

  // Check if the popup element exists
  if (popup) {
    // Show the popup
    popup.style.display = 'block';
    popup.style.opacity = 1; // Make it fully visible

    // Set a timeout to fade out the popup after 5 seconds (5000 milliseconds)
    setTimeout(() => {
      // You can use CSS transitions for a smooth fade effect
      popup.style.transition = 'opacity 1s ease-out';
      popup.style.opacity = 0;

      // Optionally, hide the popup completely after the fade effect is finished
      setTimeout(() => {
        popup.style.display = 'none';
      }, 1000); // Match the duration of the transition (1s in this case)
    }, 5000);
  }
});
</script>
