<script>
// Function to update the URL with the view type
function updateViewInUrl(viewType) {
  const url = new URL(window.location.href);
  url.searchParams.set('view', viewType);
  history.replaceState(null, null, url.toString());
  console.log(`URL updated with view: ${viewType}`);
}

// 5) Listens to the toggle events to hide/display the map and grid
document.getElementById('showMap').addEventListener('click', async function() {
    console.log("Show Map Button Clicked...");

    const mapContainer = document.getElementById('map');
    mapContainer.style.display = 'flex';  // Show the map container

    const showListrow = document.getElementById('showListrow');
    showListrow.style.display = 'flex';  // Show the Show List row

    const showMaprow = document.getElementById('showMaprow');
    showMaprow.style.display = 'none';  // Hide the Show Map row

    const raceListgrid = document.getElementById('raceListgrid');
    raceListgrid.style.display = 'none';  // Hide the race list grid

    const userLocation = await getLocation();
    displayMapWithResults(userLocation.lat, userLocation.lng);

    // Assuming your Mapbox GL JS map object is named 'map'
    map.resize();

    updateViewInUrl('map');
});

document.getElementById('showList').addEventListener('click', async function() {
    console.log("Show List Button Clicked...");

    const mapContainer = document.getElementById('map');
    mapContainer.style.display = 'none';  // Hide the map container

    const showListrow = document.getElementById('showMaprow');
    showListrow.style.display = 'flex';  // Show the Show Map row

    const showMaprow = document.getElementById('showListrow');
    showMaprow.style.display = 'none';  // Hide the Show List row

    const raceListgrid = document.getElementById('raceListgrid');
    raceListgrid.style.display = 'flex';  // Show the race list grid

    updateViewInUrl('list'); 

});

// Function to load the view from URL parameters
function loadViewFromUrlParams() {
  const urlSearchParams = new URLSearchParams(window.location.search);
  const viewType = urlSearchParams.get('view');
  if (viewType === 'map') {
    document.getElementById('showMap').click();
  } else if (viewType === 'list') {
    document.getElementById('showList').click();
  }
  console.log(`Loaded view from URL: ${viewType}`);
}

// 6) Check the URL parameters and preset the filter if there are any filters already set
function checkAndPresetFilters() {
  console.log("Checking and Presetting Filters from URL Params...");

  const urlSearchParams = new URLSearchParams(window.location.search);

  // Handle discipline filters (can be multiple)
  Array.from(urlSearchParams.keys()).forEach(key => {
    if (key.startsWith('discipline')) {
      const disciplineValue = urlSearchParams.get(key);
      const checkbox = document.querySelector(`input[filter-value='${disciplineValue}']`);
      if (checkbox) {
        checkbox.checked = true;
        const parentLabel = checkbox.closest(".w-checkbox.checkbox-buttons");
        parentLabel.classList.add("active-filter");
      }
    }
  });

  // Handle minDist filter
  const minDist = urlSearchParams.get('minDist');
  if (minDist) {
    const minDistInput = document.getElementById('minimum-distance');
    if (minDistInput) {
      minDistInput.value = minDist;
    }
  }

  // Handle maxDist filter
  const maxDist = urlSearchParams.get('maxDist');
  if (maxDist) {
    const maxDistInput = document.getElementById('maximum-distance');
    if (maxDistInput) {
      maxDistInput.value = maxDist;
    }
  }

  // Handle locationRange filter
  const locationRange = urlSearchParams.get('locationRange');
  if (locationRange) {
    const locationRangeInput = document.getElementById('location_range');
    if (locationRangeInput) {
      locationRangeInput.value = locationRange;
    }
  }

  // Handle fromDate filter
  const fromDate = urlSearchParams.get('fromDate');
  if (fromDate) {
    const fromDateInput = document.getElementById('dateFrom');
    if (fromDateInput) {
      fromDateInput.value = fromDate;
    }
  }

  // Handle toDate filter
  const toDate = urlSearchParams.get('toDate');
  if (toDate) {
    const toDateInput = document.getElementById('dateTo');
    if (toDateInput) {
      toDateInput.value = toDate;
    }
  }

  // Handle type filter
  const type = urlSearchParams.get('type');
  if (type) {
    const radioButton = document.getElementById(type);
    if (radioButton) {
      radioButton.checked = true;
    }
  }

  // Handle location filter
  const location = urlSearchParams.get('location');
  const lat = urlSearchParams.get('lat');
  const lon = urlSearchParams.get('lon');
  if (location) {
    const searchBarElement = document.getElementById('search-bar');
    if (searchBarElement) {
      searchBarElement.value = location;
      if (lat) searchBarElement.setAttribute('data-lat', lat);
      if (lon) searchBarElement.setAttribute('data-lon', lon);
    }
  }
}

// Load View Based on View Params
loadViewFromUrlParams();
</script>
