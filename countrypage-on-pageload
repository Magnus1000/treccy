<!-- ############################################ PAGE LOAD ############################################ -->
<!-- Mapbox styles and scripts -->
<link href='https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.css' rel='stylesheet' />
<script src='https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.js'></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" type="text/css" />
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>

<script>
// Globals and Configuration
console.log("Script Initiated");

const mapboxToken = 'pk.eyJ1IjoibWFnbnVzMTk5MyIsImEiOiJjbGwyOHUxZTcyYTc1M2VwZDhzZGY3bG13In0._jM6tBke0CyM5_udTKGDOQ';
const algoliaConfig = {
    appId: "CWUIX0EWFE",
    apiKey: "4cd4c82105f395affbc472c07a9789c8",
    indexName: 'treccy_races_all'
};

// Function to extract country from URL
function getCountryFromURL() {
  const urlPathname = window.location.pathname; // Get the current URL path
  const segments = urlPathname.split('/'); // Split the path into segments
  let country = segments[2]; // Get the country segment
  country = country.replace(/-/g, ' '); // Replace hyphens with spaces
  console.log("Extracted country from URL:", country);
  return country;
}

// STEP 1 - CHECK IF URL PARAMS EXIST
  // Date formatting function
  function formatDate(dateString) {
      const date = new Date(dateString);
      const day = date.getDate();
      const month = date.toLocaleString('en-US', { month: 'short' });
      const year = date.getFullYear().toString().substr(-2);
      const formattedDate = `${day} ${month} ${year}`;
      
      console.log("Formatted date:", formattedDate);
      return formattedDate;
  }

  // Function to fetch Algolia Results
async function fetchAlgoliaResults(lat, lng, radius, page = 0) {
    console.log("Fetching Algolia Results...");

    const country = getCountryFromURL(); // Extract country from URL
    const filters = [`country_ag:"${country}"`]; // Add country filter to the search
    const urlSearchParams = new URLSearchParams(window.location.search);

    // Iterate through all parameters and build the filters dynamically
    urlSearchParams.forEach((value, key) => {
        if (key.startsWith('discipline')) {
            // Handle discipline parameters separately since they are arrays
            filters.push(`disciplines_ag:${value}`);
        } else if (key !== 'lat' && key !== 'lng' && key !== 'locationRange') {
            // Handle other parameters as key-value pairs
            filters.push(`${key}:${value}`);
        }
    });


    // Prepare search parameters
    const searchParams = {
        hitsPerPage: 20,
        filters: filters.join(' AND '),
        page: page

    };

    // Include aroundLatLng and aroundRadius if lat and lng are valid numbers
    if (!isNaN(lat) && !isNaN(lng)) {
        searchParams.aroundLatLng = `${lat},${lng}`;
        if (!isNaN(radius)) {
            searchParams.aroundRadius = radius;
        }
    }

    const searchClient = algoliasearch(algoliaConfig.appId, algoliaConfig.apiKey);
    const index = searchClient.initIndex(algoliaConfig.indexName);

    console.log("Filters being sent to Algolia:", filters);

    // URL encode the filters before building the debug URL
    const encodedFilters = encodeURIComponent(filters.join(' AND '));
    const debugURL = `https://${algoliaConfig.appId}-dsn.algolia.net/1/indexes/${algoliaConfig.indexName}/query?hitsPerPage=20&aroundLatLng=${lat},${lng}&aroundRadius=${radius}&filters=${encodedFilters}`;
    console.log("Debug URL with parameters:", debugURL);

    const results = await index.search('', searchParams);

	    try {
        const results = await index.search('', searchParams);
        console.log("Algolia Search Results:", results);
        // Update the global algoliaResults variable with the fetched results
        algoliaResults = results.hits;
        return results.hits;
    } catch (error) {
        console.error("An error occurred while fetching Algolia results:", error);
        return [];
    }
}

// Load Algolia Results
async function loadAlgoliaResultsToDiv(lat, lng, radius, page = 0) {
  console.log("Fetching and Displaying Algolia Results in Div...");

  const results = await fetchAlgoliaResults(lat, lng, radius, page);

  const algoliaRacesDiv = document.getElementById('algoliaRaces');
  algoliaRacesDiv.innerHTML = '';  // Clear any previous data

  // Assuming you have at least one 'race-card' in the DOM, clone it as a template
  const raceCardTemplate = document.querySelector('.race-card').cloneNode(true);

  results.forEach(result => {
    const formattedDate = formatDate(result.date_ag); // Format the date using your function
    
    // Clone the template
    const newRaceCard = raceCardTemplate.cloneNode(true);
    
    // Populate data
    newRaceCard.querySelector('.race-card-image-link-block').href = `/races/${result.slug_ag}`;
    newRaceCard.querySelector('.race-card-image').src = result.photo_main_ag;
    newRaceCard.querySelector('.race-card-image').alt = result.name_ag;
    newRaceCard.querySelector('.race-card-heading').textContent = result.name_ag;
    newRaceCard.querySelector('.race-card-heading-right').textContent = result.distance_ag;
    newRaceCard.querySelector('.race-grid-location').textContent = result.city_ag;
    newRaceCard.querySelector('.race-card-date-text').textContent = formattedDate;
    
    // Append the new race card to the parent div
    algoliaRacesDiv.appendChild(newRaceCard);
  });
}

// Function to check if there are any URL parameters and load Algolia results
function checkAndLoadAlgoliaResults() {
    const urlSearchParams = new URLSearchParams(window.location.search);
    const lat = parseFloat(urlSearchParams.get('lat'));
    const lng = parseFloat(urlSearchParams.get('lng'));
    const locationRange = parseFloat(urlSearchParams.get('locationRange')); // Parse the locationRange parameter

    if (isNaN(lat) || isNaN(lng)) {
        console.log("Latitude and Longitude parameters are missing or invalid. Continuing without location-based search.");
    }

    if (isNaN(locationRange)) {
        console.log("Location Range parameter is missing or invalid. Continuing with default or no radius.");
    }

    // Call the load function with the parsed lat, lng, and locationRange
    loadAlgoliaResultsToDiv(lat, lng, locationRange);
}

// Check if URL parameters exist and load Algolia results
checkAndLoadAlgoliaResults();

// Variable to keep track of the current page
let currentPage = 0;

// Function to handle scroll event
function handleScroll() {
    // Check if user is at the bottom of the page
    if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 500) {
        // Increment current page
        currentPage++;

        // Fetch and display the next page of Algolia results
        const urlSearchParams = new URLSearchParams(window.location.search);
        const lat = parseFloat(urlSearchParams.get('lat'));
        const lng = parseFloat(urlSearchParams.get('lng'));
        const locationRange = parseFloat(urlSearchParams.get('locationRange'));
        
        loadAlgoliaResultsToDiv(lat, lng, locationRange, currentPage); // Pass the current page number
    }
}

// Add scroll event listener
window.addEventListener('scroll', handleScroll);
</script>
