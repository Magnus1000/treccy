<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@algolia/autocomplete-theme-classic" />
<style>
  :root {
    --aa-icon-size: 80px;
  }
</style>
<script src="https://cdn.jsdelivr.net/npm/@algolia/autocomplete-js"></script>
<script src="https://cdn.jsdelivr.net/npm/preact/dist/preact.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/algoliasearch@4.5.1/dist/algoliasearch-lite.umd.js"></script>

<script>
  function toTitleCase(str) {
    return str.replace(/\w\S*/g, function(txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
  }

  const { autocomplete, getAlgoliaResults } = window['@algolia/autocomplete-js'];
  const appId = "CWUIX0EWFE";
  const apiKey = "4cd4c82105f395affbc472c07a9789c8";
  const searchClient = algoliasearch(appId, apiKey);
  const indexName = "treccy_races_all";

  console.log("Initializing Algolia autocomplete...");

  const { setIsOpen } = autocomplete({
    container: "#global-race-search",
    placeholder: "Search for kayak races",
    detachedMediaQuery: '',
    openOnFocus: true,
    getSources({ query, state }) {
      console.log("Query received:", query);

      if (!query) {
        return [];
      }

      return [
        {
          sourceId: "races",
          async getItems() {
            console.log("Fetching results from Algolia...");
            console.log("Query being sent:", query);

            try {
              const results = await getAlgoliaResults({
                searchClient,
                queries: [
                  {
                    indexName: indexName,
                    query,
                    params: {
                      attributesToSnippet: ['name_ag:10', 'description_ag:35'],
                      snippetEllipsisText: 'â€¦',
                      hitsPerPage: 5,
                      facets: ['disciplines_ag', 'city_ag', 'state_province_ag', 'country_ag']
                    }
                  }
                ]
              });

              console.log("Results from Algolia:", results);
              return results;
            } catch (error) {
              console.error("Error fetching results from Algolia:", error);
              return [];
            }
          },
templates: {
  item({ item, components, html }) {
    // Extract the date from item.date_ag and format it
    const date = new Date(item.date_ag);
    const formattedDate = `${date.getDate()} ${date.toLocaleString('en-US', { month: 'short' })} ${date.getFullYear()}`;
    // Convert disciplines to proper case
    const disciplines = toTitleCase(item.disciplines_ag.join(', '));

    // Check if both discipline and location (city, state_province, or country) are present
    const showCategoryLink = item.disciplines_ag.length > 0 && (item.city_ag || item.state_province_ag || item.country_ag);

    // Constructing the category link
    const categoryLink = showCategoryLink ? `/countries/${item.country_ag}?discipline0=${item.disciplines_ag[0]}` : '';

    return html`
      <div>
        ${showCategoryLink ? html`<a href="${categoryLink}">See all ${disciplines} races in ${item.country_ag}</a>` : ''}
      </div>
      <a class="aa-ItemLink" href="/races/${item.slug_ag}">
        <div class="aa-ItemContent">
          <div class="aa-ItemContentBody">
            <div class="aa-ItemContentTitle">
              ${item.name_ag} 
            </div>
            <div class="aa-ItemContentSubtitle">
              ${item.city_ag}, ${item.state_province_ag}, ${item.country_ag} - ${formattedDate} 
            </div>
            <div class="aa-ItemContentDescription">
              ${disciplines} 
            </div>
          </div>
        </div>
      </a>`;
  },
  noResults() {
    return "No races for this query.";
  }
},

            noResults() {
              return "No races for this query.";
            }
          },
          getItemUrl({ item }) {
            return "/races/" + item.slug_ag;
          },
        }
      ];
    }
  });

  console.log("Algolia autocomplete initialized.");

  document.addEventListener('keydown', (event) => {
    if (event.metaKey && event.key.toLowerCase() === 'k') {
      setIsOpen(true);
    }
  });
</script>
