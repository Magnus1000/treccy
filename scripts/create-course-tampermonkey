// ==UserScript==
// @name         Create Course In Airtable
// @namespace    http://tampermonkey.net/
// @version      4.19.0
// @description  Enhanced UI for creating records in Airtable
// @author       Maz
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Function to check if the script is running in the main frame
    const isMainFrame = () => {
        return window.self === window.top;
    };

    // If not in main frame, exit the function
    if (!isMainFrame()) {
        return;
    }

    console.log("Course script running script in main frame only");

    const airtableApiKeyCourse = 'keyEiGPuqmRTtXcZ0'; // Replace with your Airtable API key
    const airtableBaseCourse = 'app1buEm2yEqxilPh';

  // Function to calculate minutes difference between two Date objects
  function minutesDifference(date1, date2) {
    const diffInMilliseconds = date1 - date2;
    return Math.floor(diffInMilliseconds / (1000 * 60));
  }

  // Function to format the time difference between two Date objects
  function formatTimeDifference(currentTime, pastTime) {
    // Calculate the difference in milliseconds
    const differenceInMs = currentTime - pastTime;
    const differenceInSeconds = Math.floor(differenceInMs / 1000);
    const differenceInMinutes = Math.floor(differenceInSeconds / 60);
    const differenceInHours = Math.floor(differenceInMinutes / 60);
    const differenceInDays = Math.floor(differenceInHours / 24);

    if (differenceInDays > 0) {
      return `${differenceInDays} days ago`;
    } else if (differenceInHours > 0) {
      return `${differenceInHours} hours ago`;
    } else {
      return `${differenceInMinutes} mins ago`;
    }
  }

  // Function to execute lookup on page load
  async function lookupRaceOnLoad() {
    const currentURLCourse = window.location.href;
    const airtableTableCourse = 'tblS5SD7MxfZUl3wf';
    const airtableUrlCourse = `https://api.airtable.com/v0/${airtableBaseCourse}/${airtableTableCourse}?filterByFormula={race_website_at}='${currentURLCourse}'`;

    try {
      const response = await fetch(airtableUrlCourse, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${airtableApiKeyCourse}`
        }
      });

      // Check if the fetch response is okay
      if (response.ok) {
        const responseDataCourse = await response.json();

        const selectElementCourse = document.getElementById('inputCourse0');
        const inputElementCourse1 = document.getElementById('inputCourse1');

        if (responseDataCourse.records.length > 0 && selectElementCourse) {
          // Get current time
          const currentTime = new Date();

          // Sort the records by 'created_on_at' field, newest first
          const sortedRecords = responseDataCourse.records.sort((a, b) => {
            return new Date(b.fields.created_on_at) - new Date(a.fields.created_on_at);
          });

          // Set inputCourse1 to the ID of the first (newest) record
          if (inputElementCourse1) {
            inputElementCourse1.value = sortedRecords[0].id;
            inputElementCourse1.readOnly = true; // Make the input read-only
            inputElementCourse1.style = "background-color: #f3f3f3; border-style: none;";  // Grey out the background
          }

          // Populate the select element with options
          sortedRecords.forEach(record => {
            const createdOnDate = new Date(record.fields.created_on_at);
            const timeDifference = formatTimeDifference(currentTime, createdOnDate);

            const optionElement = document.createElement('option');
            optionElement.value = record.fields.name_at;
            optionElement.setAttribute('data-race-id', record.id);
            optionElement.innerText = `${record.fields.name_at} (${timeDifference})`;
            selectElementCourse.appendChild(optionElement);
          });

          console.log('Options added to select element and inputCourse1 set.');
        } else if (!selectElementCourse) {
          console.log('Select element with ID "inputCourse0" not found.');
        } else {
          console.log('No matching record found.');
        }
      } else {
        throw new Error(`Failed to fetch: ${response.status}`);
      }
    } catch (error) {
      console.log(`Error fetching Airtable: ${error}`);
      const webhookResponseDivCourse = document.getElementById('webhook-response-div-course');
      if (webhookResponseDivCourse) {
        webhookResponseDivCourse.innerHTML = "<strong>ERROR:</strong> Can't fetch Airtable";
        webhookResponseDivCourse.style = "background-color: #ff00002e; padding: 10px; border-radius: 5px; margin-left: 10px; margin-right: 10px; font-size: 11px; color: red;";
      }
    }
  }

  // Function to fetch records from Airtable and populate options for multiple IDs
  async function fetchAndPopulateOptionsCourse(ids) {
    const tableNameCourse = 'tblKbHneWHFgaFUsZ';
    const airtableEndpointCourse = `https://api.airtable.com/v0/${airtableBaseCourse}/${tableNameCourse}`;

    const requestOptionsCourse = {
      headers: {
          Authorization: `Bearer ${airtableApiKeyCourse}`
      }
    };

    try {
      const response = await fetch(airtableEndpointCourse, requestOptionsCourse);
      const data = await response.json();
      const records = data.records;

      // Loop through each id in the array
      for (var i = 0; i < ids.length; i++) {
        // Get the select element by its dynamic id
        const selectElementCourse = document.getElementById(ids[i]);

        if (selectElementCourse === null) {
          console.log("Select element with ID: " + ids[i] + " not found.");
          continue;
        }

        // Create and append an empty option
        const emptyOption = document.createElement('option');
        emptyOption.value = "";
        emptyOption.innerText = "Please select";
        selectElementCourse.appendChild(emptyOption);

        // Populate the select element with options
        records.forEach(record => {
          const optionElementCourse = document.createElement('option');
          optionElementCourse.value = record.fields.name_at;
          optionElementCourse.innerText = record.fields.name_at;
          selectElementCourse.appendChild(optionElementCourse);
        });

        console.log("Options populated for ID: " + ids[i]);
      }
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  }

      function updateInputCourse1() {
    const selectElementCourse0 = document.getElementById('inputCourse0');
    const inputElementCourse1 = document.getElementById('inputCourse1');

    // Get the selected index and option element
    const selectedIndex = selectElementCourse0.selectedIndex;
    const selectedOption = selectElementCourse0.options[selectedIndex];

    // Update inputCourse1 with the value from the selected option
    inputElementCourse1.value = selectedOption.getAttribute('data-race-id');
  }



    let dateStartTimeStringCourse = "";
    let dateEndTimeStringCourse = "";

    function getStartDateTimeCourse() {
        // Create a new Date object and name it start_date
        const start_dateCourse = new Date();

        // Get the individual components of the date and time
        const yearCourse = start_dateCourse.getFullYear();
        const monthCourse = start_dateCourse.getMonth() + 1; // Months start from 0
        const dayCourse = start_dateCourse.getDate();
        const hoursCourse = start_dateCourse.getHours();
        const minutesCourse = start_dateCourse.getMinutes();
        const secondsCourse = start_dateCourse.getSeconds();

        // Create a formatted string of the current date and time
        dateStartTimeStringCourse = `${yearCourse}-${monthCourse}-${dayCourse} ${hoursCourse}:${minutesCourse}:${secondsCourse}`;

        // Log the current date and time to the console
        console.log("Current Date and Time:", dateStartTimeStringCourse);
    }

    function getEndDateTimeCourse() {
        // Create a new Date object and name it start_date
        const end_dateCourse = new Date();

        // Get the individual components of the date and time
        const yearCourse = end_dateCourse.getFullYear();
        const monthCourse = end_dateCourse.getMonth() + 1; // Months start from 0
        const dayCourse = end_dateCourse.getDate();
        const hoursCourse = end_dateCourse.getHours();
        const minutesCourse = end_dateCourse.getMinutes();
        const secondsCourse = end_dateCourse.getSeconds();

        // Create a formatted string of the current date and time
        dateEndTimeStringCourse = `${yearCourse}-${monthCourse}-${dayCourse} ${hoursCourse}:${minutesCourse}:${secondsCourse}`;

        // Log the current date and time to the console
        console.log("End Date and Time:", dateEndTimeStringCourse);
    }

    // Function to set input type to "date"
    function setInputTypeToDateCourse() {
      // Get the input field by its id
      var inputField = document.getElementById('inputCourse4');

      // Change the type attribute to "date"
      inputField.type = 'date';

      console.log("Input type set to date.");
    }

    // Function to set input type to "time"
    function setInputTypeToTimeCourse() {
        // Get the input field by its id
        var inputField = document.getElementById('inputCourse5');

        // Change the type attribute to "time"
        inputField.type = 'time';

        console.log("Input type set to time.");
    }


  // Function to change multiple input elements to select elements
  function changeMultipleInputsToSelectCourse(ids) {
    // Loop through each id in the array
    for (var i = 0; i < ids.length; i++) {
      // Get the input field by its dynamic id
      var inputField = document.getElementById(ids[i]);

      // Check if input field exists
      if (inputField === null) {
        console.log("Input field with ID: " + ids[i] + " not found.");
        continue; // Skip this iteration and continue with the next ID
      }

      // Create a new select element
      var selectElementCourse = document.createElement('select');
      selectElementCourse.id = ids[i];
      selectElementCourse.style.margin = '0px';
      selectElementCourse.style.padding = '0px';
      selectElementCourse.style.height = '30px';

      // Replace the input element with the select element
      inputField.parentNode.replaceChild(selectElementCourse, inputField);

      console.log("Input field with ID: " + ids[i] + " changed to select field.");
    }
  }

  // Function to change multiple input elements to textarea elements and apply styling
  function changeMultipleInputsToTextAreasWithStyleCourse(inputCourseIds) {
    inputCourseIds.forEach(id => {
      // Get the input field by its id
      var inputField = document.getElementById(id);

      if (inputField) {
        // Create a new textarea element
        var textareaElementCourse = document.createElement('textarea');
        textareaElementCourse.id = id;
        textareaElementCourse.style.margin = '0px';
        textareaElementCourse.style.padding = '0px';
        textareaElementCourse.style.height = '30px';
        textareaElementCourse.style.resize = 'vertical';  // Added this line for vertical resize

        // Replace the input element with the textarea element
        inputField.parentNode.replaceChild(textareaElementCourse, inputField);
        console.log(`Input field ${id} changed to textarea with vertical resize enabled.`);
      } else {
        console.log(`Element with ID ${id} not found.`);
      }
    });
  }

    // Function to toggle panel visibility
    const togglePanelCourse = () => {
        const panelCourse = document.getElementById('panelCourse');
        if (panelCourse.style.right === '0px') {
            panelCourse.style.right = '-20%';
        } else {
            panelCourse.style.right = '0px';
        }
        console.log("Course panel toggled");  // Logging the toggle action
    };

    // Function to create a padded div around a given element
    const createPaddedDivCourse = (element) => {
        const paddedDivCourse = document.createElement('div');
        paddedDivCourse.style.paddingTop = "20px";
        paddedDivCourse.style.paddingBottom = "20px";
        paddedDivCourse.appendChild(element);
        return paddedDivCourse;
    };

    // Function to create a div for webhook responses
    const createWebhookResponseDivCourse = () => {
    const webhookResponseDivCourse = document.createElement('div');
    webhookResponseDivCourse.id = 'webhook-response-div-course';
    webhookResponseDivCourse.style = "background-color: lightgrey; padding: 10px; border-radius: 5px; margin-left: 10px; margin-right: 10px; font-size: 11px;";
    webhookResponseDivCourse.innerHTML = "<strong>Webhook Responses:</strong><br>";
    return webhookResponseDivCourse;
    };

    let secondsCourse = 0;

    function startTimerCourse() {
        const timerElementCourse = document.getElementById('timerCourse'); // We will create this HTML element soon

        setInterval(function() {
            secondsCourse++; // Increment the seconds count by 1
            const minutesCourse = Math.floor(secondsCourse / 60); // Calculate the number of minutes
            const remainingSecondsCourse = secondsCourse % 60; // Calculate the remaining seconds

            // Display minutes and seconds with leading zeros where needed
            const displayMinutesCourse = String(minutesCourse).padStart(2, '0');
            const displaySecondsCourse = String(remainingSecondsCourse).padStart(2, '0');

            timerElementCourse.innerHTML = `${displayMinutesCourse}:${displaySecondsCourse}`; // Update the timer display
        }, 1000); // 1000 milliseconds (1 second)
    }

    function addTimerToPanelCourse(panelElementCourse) {
        // Create a div to hold the timer and set its ID
        const timerDivCourse = document.createElement('div');
        timerDivCourse.id = "timerCourse";
        timerDivCourse.style = "font-size: 16px; margin: 10px;";  // You can adjust the styling as needed

        // Append the timer div to the panel div
        panelElementCourse.insertBefore(timerDivCourse, panelElementCourse.firstChild);  // Adds the timer as the first child of the panel
        console.log("Course timer added to panel");  // Logging to confirm

        // Initialize the timer
        startTimerCourse();
    }


    // Define labels and keys for easy modification
    const buttonLabelsCourse = ["Race Name", "Race Airtable ID", "Course Name", "Description", "Start Date", "Start Time", "Sport 1", "Distance 1", "Description 1", "Sport 2", "Distance 2", "Description 2", "Sport 3", "Distance 3", "Description 3", "Sport 4", "Distance 4", "Description 4", "Sport 5", "Distance 5", "Description 5"];
    const webhookKeysCourse = ["race_name_at", "race_airtable_id", "name_at", "description_at", "start_date_at", "start_time_at", "sport_1_at", "distance_1_at", "description_1_at", "sport_2_at", "distance_2_at", "description_2_at", "sport_3_at", "distance_3_at", "description_3_at", "sport_4_at", "distance_4_at", "description_4_at", "sport_5_at", "distance_5_at", "description_5_at"];

    // Create panel and set its properties
    const panelCourse = document.createElement('div');
    panelCourse.id = "panelCourse";
    panelCourse.style = "position: fixed; right: -20%; top: 0; bottom: 0; width: 20%; max-height: 100vh; overflow-y: auto; background-color: #fbf8ef; z-index: 9999; padding-top: 60px; display: flex; flex-direction: column; justify-content: flex-start; row-gap: 10px; border-left: 3px solid #BFF103;";

 const displayImagesInPanelCourse = () => {
    const imageContainerCourse = document.createElement('div');
    imageContainerCourse.style = "display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-top: 20px; margin-left: 10px; margin-right: 10px;";
    const imagesCourse = document.getElementsByTagName('img');

    for (let img of imagesCourse) {
        if (!img.src || img.src.endsWith('.svg')) {
            continue;
        }

        // Create a container for each image and its checkboxes
        const imgCheckboxContainerCourse = document.createElement('div');

        const imgElementCourse = document.createElement('img');
        imgElementCourse.src = img.src;
        imgElementCourse.style = "width: 100%; height: auto; border-radius: 5px;";
        imgCheckboxContainerCourse.appendChild(imgElementCourse);

        // Create checkboxes
        const mainCheckboxCourse = document.createElement('input');
        mainCheckboxCourse.type = 'checkbox';
        mainCheckboxCourse.className = 'main-photo-checkbox-course';
        const mainLabelCourse = document.createElement('label');
        mainLabelCourse.innerHTML = 'Main photo';
        imgCheckboxContainerCourse.appendChild(mainCheckboxCourse);
        imgCheckboxContainerCourse.appendChild(mainLabelCourse);

        const mapCheckboxCourse = document.createElement('input');
        mapCheckboxCourse.type = 'checkbox';
        const mapLabelCourse = document.createElement('label');
        mapLabelCourse.innerHTML = 'Map';
        imgCheckboxContainerCourse.appendChild(mapCheckboxCourse);
        imgCheckboxContainerCourse.appendChild(mapLabelCourse);

        const galleryCheckboxCourse = document.createElement('input');
        galleryCheckboxCourse.type = 'checkbox';
        const galleryLabelCourse = document.createElement('label');
        galleryLabelCourse.innerHTML = 'Gallery';
        imgCheckboxContainerCourse.appendChild(galleryCheckboxCourse);
        imgCheckboxContainerCourse.appendChild(galleryLabelCourse);

        imageContainerCourse.appendChild(imgCheckboxContainerCourse);
    }

    panelCourse.appendChild(imageContainerCourse);

        // Make sure only one 'Main photo' checkbox can be selected
        const mainPhotoCheckboxesCourse = document.querySelectorAll('.main-photo-checkbox-course');
        mainPhotoCheckboxesCourse.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                if (this.checked) {
                    mainPhotoCheckboxesCourse.forEach(box => {
                        if (box !== this) {
                            box.checked = false;
                        }
                    });
                }
            });
        });

        console.log("Non-SVG images and checkboxes added to panel");
    };

    // Create and append the webhookResponseDiv
    const webhookResponseDivCourse = createWebhookResponseDivCourse();
    panelCourse.appendChild(webhookResponseDivCourse);

    // Create the fields and buttons
    for (let i = 0; i < 21; i++) {
        const rowDivCourse = document.createElement('div');
        rowDivCourse.style = "display: flex; justify-content: center; align-items: flex-end; column-gap: 5px;";

        const inputDivCourse = document.createElement('div');
        inputDivCourse.style = "display: flex; flex-direction: column; width: 60%;"; // Column layout for the label and input
        const labelCourse = document.createElement('label');
        labelCourse.innerText = buttonLabelsCourse[i];
        labelCourse.htmlFor = `inputCourse${i}`;
        labelCourse.style = "font-size: 10px; line-height: 10px;";
        const inputCourse = document.createElement('input');
        inputCourse.id = `inputCourse${i}`;
        inputCourse.style = "margin: 0; padding: 0; height: 30px;";
        inputDivCourse.appendChild(labelCourse);
        inputDivCourse.appendChild(inputCourse);
        rowDivCourse.appendChild(inputDivCourse);

        const buttonDivCourse = document.createElement('div');
        const buttonCourse = document.createElement('button');
        buttonCourse.innerText = `Set ${buttonLabelsCourse[i]}`;
        buttonCourse.id = `btn${i}`;
        buttonCourse.style = "margin: 0; padding: 0 10px 0 10px; border: 1px solid #1B2B1C; border-radius: 5px; height: 30px; font-size: 10px; width: 100%";
        buttonDivCourse.style = "width: 30%;";
        buttonCourse.addEventListener('click', function() {
            const selectedTextCourse = window.getSelection().toString();
            document.getElementById(`inputCourse${i}`).value = selectedTextCourse;
        });
        buttonDivCourse.appendChild(buttonCourse);
        rowDivCourse.appendChild(buttonDivCourse);

        panelCourse.appendChild(rowDivCourse);
    }

    // Call the function to display images in the panel
    displayImagesInPanelCourse();

    const createRecordBtnCourse = document.createElement('button');
    createRecordBtnCourse.innerText = "Create Course in Airtable";
    createRecordBtnCourse.style = "background-color: #E6E4D5; color: white; border-radius: 5px; padding: 10px; width: 100%; margin: 10px;";
    createRecordBtnCourse.disabled = true;

    // Create the padded div around the 'Create Record' button
    const paddedCreateRecordDivCourse = createPaddedDivCourse(createRecordBtnCourse);
    paddedCreateRecordDivCourse.style = "display: flex; justify-content: center;";

    panelCourse.appendChild(paddedCreateRecordDivCourse);
    document.body.appendChild(panelCourse);


    // Function to enable or disable the 'Create Record' button
    const checkInputFieldsCourse = function() {
        const conditionsCourse = ['inputCourse2'].every(id => document.getElementById(id).value);
        createRecordBtnCourse.style.backgroundColor = conditionsCourse ? "#1B2B1C" : "#E6E4D5";
        createRecordBtnCourse.disabled = !conditionsCourse;
    };

    document.addEventListener('input', checkInputFieldsCourse);

    // Function to prepopulate the 'race_website_at' field with the current URL
const prepopulateWebsiteUrlCourse = () => {
    const websiteInputCourse = document.getElementById("inputCourse8"); // "inputCourse8" corresponds to "race_website_at"
    if (websiteInputCourse) {
        websiteInputCourse.value = window.location.href;
        console.log("Prepopulated 'race_website_at' with the current URL");
    } else {
        console.log("The input field for 'race_website_at' could not be found.");
    }
};

// Function to safely read the 'checked' property of a checkbox
const safeCheckboxReadCourse = (checkboxElementCourse) => {
    if (checkboxElementCourse !== null) {
        return checkboxElementCourse.checked;
    } else {
        console.log("Warning: Checkbox element is null");
        return false;
    }
};

// Collect URLs based on checkbox selection
const collectImageURLsCourse = () => {
    const galleryImagesCourse = [];
    const mapImagesCourse = [];
    let mainPhotoCourse = "";

    const imgCheckboxContainersCourse = document.querySelectorAll('div');

    imgCheckboxContainersCourse.forEach(container => {
        const imgElementCourse = container.querySelector('img');

        // Ensure checkboxes exist before reading their 'checked' property
        const mainCheckboxCourse = container.querySelector('.main-photo-checkbox-course');
        const mapCheckboxCourse = container.querySelector('input[type=checkbox]:nth-child(4)');
        const galleryCheckboxCourse = container.querySelector('input[type=checkbox]:nth-child(6)');

        if (mainCheckboxCourse && mainCheckboxCourse.checked) {
            mainPhotoCourse = imgElementCourse.src;
        }

        if (mapCheckboxCourse && mapCheckboxCourse.checked) {
            mapImagesCourse.push(imgElementCourse.src);
        }

        if (galleryCheckboxCourse && galleryCheckboxCourse.checked) {
            galleryImagesCourse.push(imgElementCourse.src);
        }
    });

    return { galleryImagesCourse, mapImagesCourse, mainPhotoCourse };
};


    // Add click event to create record button
    createRecordBtnCourse.addEventListener('click', async function() {
        createRecordBtnCourse.innerText = "Wait..."; // Change text to "Wait..."
        createRecordBtnCourse.disabled = true;  // Disable the button

        // Call the function to see it in action
        getEndDateTimeCourse();

        // Gather existing data
        let dataCourse = {
            "source": "MazScraper",
            "time": `${secondsCourse}`,
            "start_time": `${dateStartTimeStringCourse}`,
            "end_time": `${dateEndTimeStringCourse}`
        };

        for (let i = 0; i < 21; i++) {
            dataCourse[webhookKeys[i]] = document.getElementById(`inputCourse${i}`).value;
        }

        // Collect image URLs based on checkbox selections
        const { galleryImagesCourse, mapImagesCourse, mainPhotoCourse } = collectImageURLs();

        // Include new fields in the data object
        data["gallery_images_at_course"] = galleryImagesCourse;
        data["map_images_at_course"] = mapImagesCourse;
        data["photo_main_at_course"] = mainPhotoCourse;

        // Make the API request to the webhook
        const response = await fetch('https://hook.us1.make.com/heo546npjlw6polbu22s9zn4ut8c4u6f', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });

        // Get and log the response data
        const responseDataCourse = await response.json();
        console.log(`race_record_id: ${JSON.stringify(responseDataCourse)}`);

        // Update the webhookResponseDiv with the new data
        const webhookResponseDivCourse = document.getElementById('webhook-response-div-course');
        webhookResponseDivCourse.innerHTML += `<br>Response Data: ${JSON.stringify(responseDataCourse)}`;

        createRecordBtnCourse.innerText = "Create Record in Airtable";
        createRecordBtnCourse.disabled = false;  // Re-enable the button
    });

    // Create the toggle button and add it to the top-left corner
    const toggleButtonCourse = document.createElement('button');
    toggleButtonCourse.innerText = "Create Course";
    toggleButtonCourse.style = "color: #BFF103; position: fixed; right: 20px; top: 80px; z-index: 10000; background-color: #1B2B1C; padding: 5px; border-radius: 5px; border: 1px solid #1B2B1C;";
    toggleButtonCourse.addEventListener('click', togglePanelCourse);
    document.body.appendChild(toggleButtonCourse);

    // Call the function to prepopulate 'race_website_at' field
    prepopulateWebsiteUrlCourse();

    // Add timer to the panel div
    addTimerToPanelCourse(panelCourse);

    // Call the function to set inputCourse4 field to type date
    setInputTypeToDateCourse();

    // Call the function to set inputCourse5 field to type time
    setInputTypeToTimeCourse()

    // Function to lookup race on load
    lookupRaceOnLoad();

    // Call the function to set inputCourse fields to type select
    changeMultipleInputsToSelectCourse(['inputCourse0', 'inputCourse6', 'inputCourse9', 'inputCourse12', 'inputCourse15', 'inputCourse18']);

    // You can call the function like this to change multiple inputs:
    changeMultipleInputsToTextAreasWithStyleCourse(['inputCourse3', 'inputCourse8', 'inputCourse11', 'inputCourse14', 'inputCourse17', 'inputCourse20']);

    // Call the function to populate the sports fields with options
    fetchAndPopulateOptionsCourse(['inputCourse6', 'inputCourse9', 'inputCourse12', 'inputCourse15', 'inputCourse18']);

    // Add event listener for inputCourse0 select element
    const selectElementCourse0 = document.getElementById('inputCourse0');
    if (selectElementCourse0) {
      selectElementCourse0.addEventListener('change', updateInputCourse1);
    }

    // Call the function to get start time
    getStartDateTimeCourse();

})();
