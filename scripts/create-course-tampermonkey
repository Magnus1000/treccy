// ==UserScript==
// @name         Create Course In Airtable
// @namespace    http://tampermonkey.net/
// @version      4.19.0
// @description  Enhanced UI for creating records in Airtable
// @author       Maz
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Function to check if the script is running in the main frame
    const isMainFrame = () => {
        return window.self === window.top;
    };

    // If not in main frame, exit the function
    if (!isMainFrame()) {
        return;
    }

    console.log("Coursescript running script in main frame only");

    // Create "Lookup" button and set its properties
    const lookupBtnCourse = document.createElement('button');
    lookupBtnCourse.innerText = "Lookup Course";
    lookupBtnCourse.style = "color: black; border: 1px solid black; border-radius: 5px; padding: 5px; margin-left: 10px; margin-right: 10px; width: 30%;";

    // Function to append the 'Lookup' button to the Panel
    const appendLookupButtonToPanel = (panelElement) => {
        panelElement.appendChild(lookupBtnCourse);
        console.log("Lookup button appended to panel");  // Logging to confirm
    };

    const airtableApiKeyCourse = 'keyEiGPuqmRTtXcZ0'; // Replace with your Airtable API key
    const airtableBaseCourse = 'app1buEm2yEqxilPh';

    // Lookup event listener
    lookupBtnCourse.addEventListener('click', async function() {
        lookupBtnCourse.innerText = "Wait..."; // Change text to "Wait..."
        lookupBtnCourse.disabled = true;  // Disable the button
        const currentURL = window.location.href;
        const airtableTable = 'tblS5SD7MxfZUl3wf';
        const airtableUrl = `https://api.airtable.com/v0/${airtableBaseCourse}/${airtableTableCourse}?filterByFormula={course_website_at}='${currentURL}'`;

        const response = await fetch(airtableUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${airtableApiKeyCourse}`
            }
        });

        const responseData = await response.json();

        // Log and update the webhookResponseDiv with the new data
        console.log(`Airtable response: ${JSON.stringify(responseDataCourse)}`);
        const webhookResponseDivCourse = document.getElementById('webhook-response-div-course');
        if (responseData.records.length > 0) {
            webhookResponseDivCourse.innerHTML += `<br>Record exists: ${JSON.stringify(responseDataCourse.records)}`;
        } else {
            webhookResponseDivCourse.innerHTML += '<br>No matching record found.';
        }

        lookupBtnCourse.innerText = "Lookup Course"; // Change text back to "Lookup"
        lookupBtnCourse.disabled = false;  // Re-enable the button
    });

    // Function to fetch records from Airtable and populate options
    async function fetchAndPopulateOptionsCourse() {
        const tableNameCourse = 'tblKbHneWHFgaFUsZ';
        const airtableEndpointCourse = `https://api.airtable.com/v0/${airtableBase}/${tableName}`;

        const requestOptions = {
            headers: {
                Authorization: `Bearer ${airtableApiKeyCourse}`
            }
        };

        try {
            const response = await fetch(airtableEndpoint, requestOptions);
            const data = await response.json();
            const records = data.records;

            // Get the select element
            const selectElement = document.getElementById('inputCourse5');

            // Populate the select element with options
            records.forEach(record => {
                const optionElement = document.createElement('option');
                optionElement.value = record.fields.name_at;
                optionElement.innerText = record.fields.name_at;
                selectElement.appendChild(optionElement);
            });

            console.log("Options populated.");

        } catch (error) {
            console.error("Error fetching data:", error);
        }
    }


    let dateStartTimeStringCourse = "";
    let dateEndTimeStringCourse = "";

    function getStartDateTimeCourse() {
        // Create a new Date object and name it start_date
        const start_dateCourse = new Date();

        // Get the individual components of the date and time
        const year = start_dateCourse.getFullYear();
        const month = start_dateCourse.getMonth() + 1; // Months start from 0
        const day = start_dateCourse.getDate();
        const hours = start_dateCourse.getHours();
        const minutes = start_dateCourse.getMinutes();
        const seconds = start_dateCourse.getSeconds();

        // Create a formatted string of the current date and time
        dateStartTimeStringCourse = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;

        // Log the current date and time to the console
        console.log("Current Date and Time:", dateStartTimeStringCourse);
    }

    function getEndDateTimeCourse() {
        // Create a new Date object and name it start_date
        const end_dateCourse = new Date();

        // Get the individual components of the date and time
        const year = end_dateCourse.getFullYear();
        const month = end_dateCourse.getMonth() + 1; // Months start from 0
        const day = end_dateCourse.getDate();
        const hours = end_dateCourse.getHours();
        const minutes = end_dateCourse.getMinutes();
        const seconds = end_dateCourse.getSeconds();

        // Create a formatted string of the current date and time
        dateEndTimeStringCourse = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;

        // Log the current date and time to the console
        console.log("End Date and Time:", dateEndTimeStringCourse);
    }

    // Function to set input type to "date"
    function setInputTypeToDate() {
      // Get the input field by its id
      var inputField = document.getElementById('inputCourse6');

      // Change the type attribute to "date"
      inputField.type = 'date';

      console.log("Input type set to date.");
    }

    // Function to change input element to select element
    function changeInputToSelect() {
        // Get the input field by its id
        var inputField = document.getElementById('inputCourse5');

        // Create a new select element
        var selectElement = document.createElement('select');
        selectElement.id = 'inputCourse5';
        selectElement.style.margin = '0px';
        selectElement.style.padding = '0px';
        selectElement.style.height = '30px';

        // Replace the input element with the select element
        inputField.parentNode.replaceChild(selectElement, inputField);

        console.log("Input field changed to select field.");
    }

  // Function to change multiple input elements to textarea elements and apply styling
  function changeMultipleInputsToTextAreasWithStyle(inputCourseIds) {
    inputIds.forEach(id => {
      // Get the input field by its id
      var inputField = document.getElementById(id);

      if (inputField) {
        // Create a new textarea element
        var textareaElement = document.createElement('textarea');
        textareaElement.id = id;
        textareaElement.style.margin = '0px';
        textareaElement.style.padding = '0px';
        textareaElement.style.height = '30px';
        textareaElement.style.resize = 'vertical';  // Added this line for vertical resize

        // Replace the input element with the textarea element
        inputField.parentNode.replaceChild(textareaElement, inputField);
        console.log(`Input field ${id} changed to textarea with vertical resize enabled.`);
      } else {
        console.log(`Element with ID ${id} not found.`);
      }
    });
  }

    // Function to toggle panel visibility
    const togglePanelCourse = () => {
        const panelCourse = document.getElementById('panelCourse');
        if (panel.style.right === '0px') {
            panel.style.right = '-20%';
        } else {
            panel.style.right = '0px';
        }
        console.log("Course panel toggled");  // Logging the toggle action
    };

    // Function to create a padded div around a given element
    const createPaddedDivCourse = (element) => {
        const paddedDivCourse = document.createElement('div');
        paddedDivCourse.style.paddingTop = "20px";
        paddedDivCourse.style.paddingBottom = "20px";
        paddedDivCourse.appendChild(element);
        return paddedDivCourse;
    };

    // Function to create a div for webhook responses
    const createWebhookResponseDivCourse = () => {
    const webhookResponseDivCourse = document.createElement('div');
    webhookResponseDivCourse.id = 'webhook-response-div-course';
    webhookResponseDivCourse.style = "background-color: lightgrey; padding: 10px; border-radius: 5px; margin-left: 10px; margin-right: 10px; font-size: 11px;";
    webhookResponseDivCourse.innerHTML = "<strong>Webhook Responses:</strong><br>";
    return webhookResponseDivCourse;
    };

    let secondsCourse = 0;

    function startTimer() {
        const timerElementCourse = document.getElementById('timerCourse'); // We will create this HTML element soon

        setInterval(function() {
            secondsCourse++; // Increment the seconds count by 1
            const minutes = Math.floor(secondsCourse / 60); // Calculate the number of minutes
            const remainingSeconds = secondsCourse % 60; // Calculate the remaining seconds

            // Display minutes and seconds with leading zeros where needed
            const displayMinutesCourse = String(minutes).padStart(2, '0');
            const displaySecondsCourse = String(remainingSeconds).padStart(2, '0');

            timerElementCourse.innerHTML = `${displayMinutesCourse}:${displaySecondsCourse}`; // Update the timer display
        }, 1000); // 1000 milliseconds (1 second)
    }

    function addTimerToPanelCourse(panelElementCourse) {
        // Create a div to hold the timer and set its ID
        const timerDiv = document.createElement('div');
        timerDivCourse.id = "timerCourse";
        timerDivCourse.style = "font-size: 16px; margin: 10px;";  // You can adjust the styling as needed

        // Append the timer div to the panel div
        panelElementCourse.insertBefore(timerDivCourse, panelElementCourse.firstChild);  // Adds the timer as the first child of the panel
        console.log("Course timer added to panel");  // Logging to confirm

        // Initialize the timer
        startTimer();
    }


    // Define labels and keys for easy modification
    const buttonLabels = ["Course Name", "Description", "Country", "Region", "City", "Sports", "Date", "Admin Emails", "Website"];
    const webhookKeys = ["name_at", "description_at", "country_at", "region_at", "city_at", "sports_at", "start_date_at", "admin_emails_at", "race_website_at"];

    // Create panel and set its properties
    const panelCourse = document.createElement('div');
    panel.id = "panelCourse";
    panelCourse.style = "position: fixed; right: -20%; top: 0; bottom: 0; width: 20%; max-height: 100vh; overflow-y: auto; background-color: #f1f1f1; z-index: 9999; padding-top: 60px; display: flex; flex-direction: column; justify-content: flex-start; row-gap: 10px;";

 const displayImagesInPanelCourse = () => {
    const imageContainerCourse = document.createElement('div');
    imageContainerCourse.style = "display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-top: 20px; margin-left: 10px; margin-right: 10px;";
    const imagesCourse = document.getElementsByTagName('img');

    for (let img of imagesCourse) {
        if (!img.src || img.src.endsWith('.svg')) {
            continue;
        }

        // Create a container for each image and its checkboxes
        const imgCheckboxContainerCourse = document.createElement('div');

        const imgElementCourse = document.createElement('img');
        imgElementCourse.src = img.src;
        imgElementCourse.style = "width: 100%; height: auto; border: 1px solid black;";
        imgCheckboxContainer.appendChild(imgElementCourse);

        // Create checkboxes
        const mainCheckboxCourse = document.createElement('input');
        mainCheckboxCourse.type = 'checkbox';
        mainCheckboxCourse.className = 'main-photo-checkbox-course';
        const mainLabelCourse = document.createElement('label');
        mainLabelCourse.innerHTML = 'Main photo';
        imgCheckboxContainerCourse.appendChild(mainCheckboxCourse);
        imgCheckboxContainerCourse.appendChild(mainLabelCourse);

        const mapCheckboxCourse = document.createElement('input');
        mapCheckboxCourse.type = 'checkbox';
        const mapLabelCourse = document.createElement('label');
        mapLabelCourse.innerHTML = 'Map';
        imgCheckboxContainerCourse.appendChild(mapCheckboxCourse);
        imgCheckboxContainerCourse.appendChild(mapLabelCourse);

        const galleryCheckboxCourse = document.createElement('input');
        galleryCheckboxCourse.type = 'checkbox';
        const galleryLabelCourse = document.createElement('label');
        galleryLabelCourse.innerHTML = 'Gallery';
        imgCheckboxContainerCourse.appendChild(galleryCheckbox)Course;
        imgCheckboxContainerCourse.appendChild(galleryLabelCourse);

        imageContainerCourse.appendChild(imgCheckboxContainerCourse);
    }

    panelCourse.appendChild(imageContainerCourse);

        // Make sure only one 'Main photo' checkbox can be selected
        const mainPhotoCheckboxesCourse = document.querySelectorAll('.main-photo-checkbox-course');
        mainPhotoCheckboxesCourse.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                if (this.checked) {
                    mainPhotoCheckboxesCourse.forEach(box => {
                        if (box !== this) {
                            box.checked = false;
                        }
                    });
                }
            });
        });

        console.log("Non-SVG images and checkboxes added to panel");
    };

    // Append the 'Lookup' button to the panel
    appendLookupButtonToPanelCourse(panelCourse);

    // Create and append the webhookResponseDiv
    const webhookResponseDivCourse = createWebhookResponseDivCourse();
    panelCourse.appendChild(webhookResponseDivCourse);

    // Create the fields and buttons
    for (let i = 0; i < 9; i++) {
        const rowDivCourse = document.createElement('div');
        rowDivCourse.style = "display: flex; justify-content: center; align-items: flex-end; column-gap: 5px;";

        const inputDivCourse = document.createElement('div');
        inputDivCourse.style = "display: flex; flex-direction: column; width: 60%;"; // Column layout for the label and input
        const labelCourse = document.createElement('label');
        labelCourse.innerText = buttonLabelsCourse[i];
        labelCourse.htmlFor = `inputCourse${i}`;
        labelCourse.style = "font-size: 10px; line-height: 10px;";
        const inputCourse = document.createElement('input');
        inputCourse.id = `inputCourse${i}`;
        inputCourse.style = "margin: 0; padding: 0; height: 30px;";
        inputDivCourse.appendChild(label);
        inputDivCourse.appendChild(inputCourse);
        rowDiv.appendChild(inputDivCourse;

        const buttonDivCourse = document.createElement('div');
        const buttonCourse = document.createElement('button');
        buttonCourse.innerText = `Set ${buttonLabels[i]}`;
        buttonCourse.id = `btn${i}`;
        buttonCourse.style = "margin: 0; padding: 0 10px 0 10px; border: 1px solid black; border-radius: 5px; height: 30px; font-size: 10px; width: 100%";
        buttonDivCourse.style = "width: 30%;";
        buttonCourse.addEventListener('click', function() {
            const selectedTextCourse = window.getSelection().toString();
            document.getElementById(`inputCourse${i}`).value = selectedTextCourse;
        });
        buttonDivCourse.appendChild(buttonCourse);
        rowDivCourse.appendChild(buttonDivCourse);

        panelCourse.appendChild(rowDivCourse);
    }

    // Call the function to display images in the panel
    displayImagesInPanelCourse();


  // Function to find all email addresses on page load
  function findEmailAddressesCourse() {
    // Get all elements on the page
    const allElementsCourse = document.querySelectorAll('*');

    const emailAddressesCourse = [];

    // Regular expression to match email addresses
    const emailRegexCourse = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g;

    allElements.forEach(element => {
      const elementTextCourse = element.textContent || element.innerText;

      // Check if elementText is defined before running match
      if (elementTextCourse) {
        const matches = elementTextCourse.match(emailRegexCourse);
        if (matches) {
          matches.forEach(email => {
            if (!emailAddressesCourse.includes(email)) {
              emailAddressesCourse.push(email);
            }
          });
        }
      }
    });

    console.log("Found email addresses:", emailAddressesCourse);

    // Set the input field value
    setInputValue(emailAddressesCourse);

    return emailAddressesCourse;
  }

  // Function to set the input field value
  function setInputValueCourse(emailArrayCourse) {
    const inputFieldCourse = document.getElementById("inputCourse7");
    if (inputFieldCourse) {
      inputFieldCourse.value = emailArrayCourse.join(", ");
      console.log("Input field value set to:", inputFieldCourse.value);
    } else {
      console.log("Input field with ID 'inputCourse7' not found");
    }
  }

    const createRecordBtnCourse = document.createElement('button');
    createRecordBtnCourse.innerText = "Create Course in Airtable";
    createRecordBtnCourse.style = "background-color: grey; color: white; border-radius: 5px; padding: 10px; width: 100%; margin: 10px;";
    createRecordBtnCourse.disabled = true;

    // Create the padded div around the 'Create Record' button
    const paddedCreateRecordDivCourse = createPaddedDivCourse(createRecordBtnCourse);
    paddedCreateRecordDivCourse.style = "display: flex; justify-content: center;";

    panelCourse.appendChild(paddedCreateRecordDivCourse);
    document.body.appendChild(panelCourse);


    // Function to enable or disable the 'Create Record' button
    const checkInputFieldsCourse = function() {
        const conditionsCourse = ['inputCourse0', 'inputCourse1', 'inputCourse2', 'inputCourse3'].every(id => document.getElementById(id).value);
        createRecordBtn.style.backgroundColor = conditions ? "black" : "grey";
        createRecordBtn.disabled = !conditions;
    };

    document.addEventListener('inputCourse', checkInputFieldsCourse);

    // Function to prepopulate the 'race_website_at' field with the current URL
const prepopulateWebsiteUrl = () => {
    const websiteInputCourse = document.getElementById("inputCourse8"); // "inputCourse8" corresponds to "race_website_at"
    if (websiteInputCourse) {
        websiteInputCourse.value = window.location.href;
        console.log("Prepopulated 'race_website_at' with the current URL");
    } else {
        console.log("The input field for 'race_website_at' could not be found.");
    }
};

// Function to safely read the 'checked' property of a checkbox
const safeCheckboxReadCourse = (checkboxElementCourse) => {
    if (checkboxElementCourse !== null) {
        return checkboxElementCourse.checked;
    } else {
        console.log("Warning: Checkbox element is null");
        return false;
    }
};

// Collect URLs based on checkbox selection
const collectImageURLsCourse = () => {
    const galleryImagesCourse = [];
    const mapImagesCourse = [];
    let mainPhotoCourse = "";

    const imgCheckboxContainersCourse = document.querySelectorAll('div');

    imgCheckboxContainersCourse.forEach(container => {
        const imgElementCourse = container.querySelector('img');

        // Ensure checkboxes exist before reading their 'checked' property
        const mainCheckboxCourse = container.querySelector('.main-photo-checkbox-course');
        const mapCheckboxCourse = container.querySelector('input[type=checkbox]:nth-child(4)');
        const galleryCheckboxCourse = container.querySelector('input[type=checkbox]:nth-child(6)');

        if (mainCheckboxCourse && mainCheckboxCourse.checked) {
            mainPhotoCourse = imgElementCourse.src;
        }

        if (mapCheckboxCourse && mapCheckboxCourse.checked) {
            mapImagesCourse.push(imgElementCourse.src);
        }

        if (galleryCheckboxCourse && galleryCheckboxCourse.checked) {
            galleryImagesCourse.push(imgElementCourse.src);
        }
    });

    return { galleryImagesCourse, mapImagesCourse, mainPhotoCourse };
};


    // Add click event to create record button
    createRecordBtnCourse.addEventListener('click', async function() {
        createRecordBtnCourse.innerText = "Wait..."; // Change text to "Wait..."
        createRecordBtnCourse.disabled = true;  // Disable the button

        // Call the function to see it in action
        getEndDateTimeCourse();

        // Gather existing data
        let dataCourse = {
            "source": "MazScraper",
            "time": `${secondsCourse}`,
            "start_time": `${dateStartTimeStringCourse}`,
            "end_time": `${dateEndTimeStringCourse}`
        };

        for (let i = 0; i < 9; i++) {
            dataCourse[webhookKeys[i]] = document.getElementById(`inputCourse${i}`).value;
        }

        // Collect image URLs based on checkbox selections
        const { galleryImagesCourse, mapImagesCourse, mainPhotoCourse } = collectImageURLs();

        // Include new fields in the data object
        data["gallery_images_at_course"] = galleryImagesCourse;
        data["map_images_at_course"] = mapImagesCourse;
        data["photo_main_at_course"] = mainPhotoCourse;

        // Make the API request to the webhook
        const response = await fetch('https://hook.us1.make.com/tygbvj6syy8boyww8wqy1fwmhimju9gq', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });

        // Get and log the response data
        const responseDataCourse = await response.json();
        console.log(`race_record_id: ${JSON.stringify(responseDataCourse)}`);

        // Update the webhookResponseDiv with the new data
        const webhookResponseDivCourse = document.getElementById('webhook-response-div-course');
        webhookResponseDivCourse.innerHTML += `<br>Response Data: ${JSON.stringify(responseDataCourse)}`;

        createRecordBtnCourse.innerText = "Create Record in Airtable";
        createRecordBtnCourse.disabled = false;  // Re-enable the button
    });

    // Create the toggle button and add it to the top-left corner
    const toggleButtonCourse = document.createElement('button');
    toggleButtonCourse.innerText = "Create Course";
    toggleButtonCourse.style = "position: fixed; right: 20px; top: 80px; z-index: 10000; background-color: #f3f3f3; padding: 5px; border-radius: 5px; border: 1px solid black;";
    toggleButtonCourse.addEventListener('click', togglePanelCourse);
    document.body.appendChild(toggleButtonCourse);

    // Call the function to prepopulate 'race_website_at' field
    prepopulateWebsiteUrlCourse();

    // Add timer to the panel div
    addTimerToPanelCourse(panelCourse);

    // Call the function to set inputCourse6 field to type date
    setInputTypeToDateCourse();

    // Call the function to set inputCourse5 field to type select
    changeInputToSelectCourse();

    // You can call the function like this to change multiple inputs:
    changeMultipleInputsToTextAreasWithStyleCourse(['inputCourse1', 'inputCourse7']);

    // Call the function to find email addresses and set the value of inputCourse7 field
    findEmailAddresseCourses();

    // Call the function to retrives sports options
    fetchAndPopulateOptionsCourse();

    // Call the function to see it in action
    getStartDateTimeCourse();

})();
