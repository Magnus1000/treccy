// ==UserScript==
// @name         Create Race In Airtable
// @namespace    http://tampermonkey.net/
// @version      4.19.0
// @description  Enhanced UI for creating records in Airtable
// @author       Maz
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Function to check if the script is running in the main frame
    const isMainFrame = () => {
        return window.self === window.top;
    };

    // If not in main frame, exit the function
    if (!isMainFrame()) {
        return;
    }

    console.log("Running script in main frame only");

    // Create "Lookup" button and set its properties
    const lookupBtn = document.createElement('button');
    lookupBtn.innerText = "Race Lookup";
    lookupBtn.style = "color: #1B2B1C; border: 1px solid #1B2B1C; border-radius: 5px; padding: 5px; margin-left: 10px; margin-right: 10px; width: 30%; background-color: transparent;";

    // Function to append the 'Lookup' button to the Panel
    const appendLookupButtonToPanel = (panelElement) => {
        panelElement.appendChild(lookupBtn);
        console.log("Lookup button appended to panel");  // Logging to confirm
    };

    const airtableApiKey = 'keyEiGPuqmRTtXcZ0'; // Replace with your Airtable API key
    const airtableBase = 'app1buEm2yEqxilPh';

    // Lookup event listener
    lookupBtn.addEventListener('click', async function() {
        lookupBtn.innerText = "Wait..."; // Change text to "Wait..."
        lookupBtn.disabled = true;  // Disable the button
        const currentURL = window.location.href;
        const airtableTable = 'tblS5SD7MxfZUl3wf';
        const airtableUrl = `https://api.airtable.com/v0/${airtableBase}/${airtableTable}?filterByFormula={race_website_at}='${currentURL}'`;

        const response = await fetch(airtableUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${airtableApiKey}`
            }
        });

        const responseData = await response.json();

        // Log and update the webhookResponseDiv with the new data
        console.log(`Airtable response: ${JSON.stringify(responseData)}`);
        const webhookResponseDiv = document.getElementById('webhook-response-div');
        if (responseData.records.length > 0) {
            webhookResponseDiv.innerHTML += `<br>Record exists: ${JSON.stringify(responseData.records)}`;
        } else {
            webhookResponseDiv.innerHTML += '<br>No matching record found.';
        }

        lookupBtn.innerText = "Lookup"; // Change text back to "Lookup"
        lookupBtn.disabled = false;  // Re-enable the button
    });

    let dateStartTimeString = "";
    let dateEndTimeString = "";

    function getStartDateTime() {
        // Create a new Date object and name it start_date
        const start_date = new Date();

        // Get the individual components of the date and time
        const year = start_date.getFullYear();
        const month = start_date.getMonth() + 1; // Months start from 0
        const day = start_date.getDate();
        const hours = start_date.getHours();
        const minutes = start_date.getMinutes();
        const seconds = start_date.getSeconds();

        // Create a formatted string of the current date and time
        dateStartTimeString = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;

        // Log the current date and time to the console
        console.log("Current Date and Time:", dateStartTimeString);
    }

    function getEndDateTime() {
        // Create a new Date object and name it start_date
        const end_date = new Date();

        // Get the individual components of the date and time
        const year = end_date.getFullYear();
        const month = end_date.getMonth() + 1; // Months start from 0
        const day = end_date.getDate();
        const hours = end_date.getHours();
        const minutes = end_date.getMinutes();
        const seconds = end_date.getSeconds();

        // Create a formatted string of the current date and time
        dateEndTimeString = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;

        // Log the current date and time to the console
        console.log("End Date and Time:", dateEndTimeString);
    }

    // Function to set input type to "date"
    function setInputTypeToDate() {
      // Get the input field by its id
      var inputField = document.getElementById('input6');

      // Change the type attribute to "date"
      inputField.type = 'date';

      console.log("Input type set to date.");
    }

        // Function to set input type to "date"
    function setInputTypeToTime() {
      // Get the input field by its id
      var inputField = document.getElementById('input7');

      // Change the type attribute to "time"
      inputField.type = 'time';

      console.log("Input type set to time.");
    }

    // Function to set unique placeholder text for multiple input fields
    function setUniquePlaceholders() {
        // Create an object mapping each input ID to its unique placeholder text
        const placeholders = {
            input0: "E.g. Ashburton Triathlon",
            input1: "E.g. Nestled at the foothills of the Southern Alps, the Ashburton Triathlon...",
            input2: "E.g. Ashburton Domain, 100 Walnut Avenue, Ashburton 7700, New Zealand",
            input3: "E.g. New Zealand",
            input4: "E.g. Canterbury",
            input5: "E.g. Ashburton",
            input8: "E.g. d.mably@hotmail.com",
            input9: "E.g. https://www.ashburtongemofthesouth.com"
  };

        // Loop through the object to set each placeholder
        Object.keys(placeholders).forEach(inputId => {
            const inputField = document.getElementById(inputId);

            if (inputField) {
                inputField.placeholder = placeholders[inputId];
                console.log(`Placeholder set for ${inputId}.`);
            } else {
                console.log(`Input field with ID ${inputId} not found.`);
            }
        });
    }


  // Function to change multiple input elements to textarea elements and apply styling
  function changeMultipleInputsToTextAreasWithStyle(inputIds) {
    inputIds.forEach(id => {
      // Get the input field by its id
      var inputField = document.getElementById(id);

      if (inputField) {
        // Create a new textarea element
        var textareaElement = document.createElement('textarea');
        textareaElement.id = id;
        textareaElement.style.margin = '0px';
        textareaElement.style.padding = '0px';
        textareaElement.style.height = '30px';
        textareaElement.style.resize = 'vertical';  // Added this line for vertical resize

        // Replace the input element with the textarea element
        inputField.parentNode.replaceChild(textareaElement, inputField);
        console.log(`Input field ${id} changed to textarea with vertical resize enabled.`);
      } else {
        console.log(`Element with ID ${id} not found.`);
      }
    });
  }

    // Function to toggle panel visibility
    const togglePanel = () => {
        const panel = document.getElementById('panel');
        if (panel.style.right === '0px') {
            panel.style.right = '-20%';
        } else {
            panel.style.right = '0px';
        }
        console.log("Panel toggled");  // Logging the toggle action
    };

    // Function to create a padded div around a given element
    const createPaddedDiv = (element) => {
        const paddedDiv = document.createElement('div');
        paddedDiv.style.paddingTop = "20px";
        paddedDiv.style.paddingBottom = "20px";
        paddedDiv.appendChild(element);
        return paddedDiv;
    };

    // Function to create a div for webhook responses
    const createWebhookResponseDiv = () => {
    const webhookResponseDiv = document.createElement('div');
    webhookResponseDiv.id = 'webhook-response-div';
    webhookResponseDiv.style = "background-color: lightgrey; padding: 10px; border-radius: 5px; margin-left: 10px; margin-right: 10px; font-size: 11px;";
    webhookResponseDiv.innerHTML = "<strong>Webhook Responses:</strong><br>";
    return webhookResponseDiv;
    };

    let seconds = 0;

    function startTimer() {
        const timerElement = document.getElementById('timer'); // We will create this HTML element soon

        setInterval(function() {
            seconds++; // Increment the seconds count by 1
            const minutes = Math.floor(seconds / 60); // Calculate the number of minutes
            const remainingSeconds = seconds % 60; // Calculate the remaining seconds

            // Display minutes and seconds with leading zeros where needed
            const displayMinutes = String(minutes).padStart(2, '0');
            const displaySeconds = String(remainingSeconds).padStart(2, '0');

            timerElement.innerHTML = `${displayMinutes}:${displaySeconds}`; // Update the timer display
        }, 1000); // 1000 milliseconds (1 second)
    }

    function addTimerToPanel(panelElement) {
        // Create a div to hold the timer and set its ID
        const timerDiv = document.createElement('div');
        timerDiv.id = "timer";
        timerDiv.style = "font-size: 16px; margin: 10px;";  // You can adjust the styling as needed

        // Append the timer div to the panel div
        panelElement.insertBefore(timerDiv, panelElement.firstChild);  // Adds the timer as the first child of the panel
        console.log("Timer added to panel");  // Logging to confirm

        // Initialize the timer
        startTimer();
    }


    // Define labels and keys for easy modification
    const buttonLabels = ["Race Name", "Description", "Address", "Country", "Region", "City", "Date", "Time", "Admin Emails", "Website"];
    const webhookKeys = ["name_at", "description_at", "location_at", "country_at", "region_at", "city_at", "start_time_at", "admin_emails_at", "race_website_at"];

    // Create panel and set its properties
    const panel = document.createElement('div');
    panel.id = "panel";
    panel.style = "position: fixed; right: -20%; top: 0; bottom: 0; width: 20%; max-height: 100vh; overflow-y: auto; background-color: #fbf8ef; z-index: 9999; padding-top: 60px; display: flex; flex-direction: column; justify-content: flex-start; row-gap: 10px; border-left: 3px solid #1B2B1C";

 const displayImagesInPanel = () => {
    const imageContainer = document.createElement('div');
    imageContainer.style = "display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-top: 20px; margin-left: 10px; margin-right: 10px;";
    const images = document.getElementsByTagName('img');

    for (let img of images) {
        if (!img.src || img.src.endsWith('.svg')) {
            continue;
        }

        // Create a container for each image and its checkboxes
        const imgCheckboxContainer = document.createElement('div');

        const imgElement = document.createElement('img');
        imgElement.src = img.src;
        imgElement.style = "width: 100%; height: auto; border: 1px solid black;";
        imgCheckboxContainer.appendChild(imgElement);

        // Create checkboxes
        const mainCheckbox = document.createElement('input');
        mainCheckbox.type = 'checkbox';
        mainCheckbox.className = 'main-photo-checkbox';
        const mainLabel = document.createElement('label');
        mainLabel.innerHTML = 'Main photo';
        imgCheckboxContainer.appendChild(mainCheckbox);
        imgCheckboxContainer.appendChild(mainLabel);

        const mapCheckbox = document.createElement('input');
        mapCheckbox.type = 'checkbox';
        const mapLabel = document.createElement('label');
        mapLabel.innerHTML = 'Map';
        imgCheckboxContainer.appendChild(mapCheckbox);
        imgCheckboxContainer.appendChild(mapLabel);

        const galleryCheckbox = document.createElement('input');
        galleryCheckbox.type = 'checkbox';
        const galleryLabel = document.createElement('label');
        galleryLabel.innerHTML = 'Gallery';
        imgCheckboxContainer.appendChild(galleryCheckbox);
        imgCheckboxContainer.appendChild(galleryLabel);

        imageContainer.appendChild(imgCheckboxContainer);
    }

    panel.appendChild(imageContainer);

        // Make sure only one 'Main photo' checkbox can be selected
        const mainPhotoCheckboxes = document.querySelectorAll('.main-photo-checkbox');
        mainPhotoCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                if (this.checked) {
                    mainPhotoCheckboxes.forEach(box => {
                        if (box !== this) {
                            box.checked = false;
                        }
                    });
                }
            });
        });

        console.log("Non-SVG images and checkboxes added to panel");
    };

    // Append the 'Lookup' button to the panel
    appendLookupButtonToPanel(panel);

    // Create and append the webhookResponseDiv
    const webhookResponseDiv = createWebhookResponseDiv();
    panel.appendChild(webhookResponseDiv);

    // Create the fields and buttons
    for (let i = 0; i < 10; i++) {
        const rowDiv = document.createElement('div');
        rowDiv.style = "display: flex; justify-content: center; align-items: flex-end; column-gap: 5px;";

        const inputDiv = document.createElement('div');
        inputDiv.style = "display: flex; flex-direction: column; width: 60%;"; // Column layout for the label and input
        const label = document.createElement('label');
        label.innerText = buttonLabels[i];
        label.htmlFor = `input${i}`;
        label.style = "font-size: 10px; line-height: 10px;";
        const input = document.createElement('input');
        input.id = `input${i}`;
        input.style = "margin: 0; padding: 0; height: 30px;";
        inputDiv.appendChild(label);
        inputDiv.appendChild(input);
        rowDiv.appendChild(inputDiv);

        const buttonDiv = document.createElement('div');
        const button = document.createElement('button');
        button.innerText = `Set ${buttonLabels[i]}`;
        button.id = `btn${i}`;
        button.style = "margin: 0; padding: 0 10px 0 10px; border: 1px solid black; border-radius: 5px; height: 30px; font-size: 10px; width: 100%";
        buttonDiv.style = "width: 30%;";
        button.addEventListener('click', function() {
            const selectedText = window.getSelection().toString();
            document.getElementById(`input${i}`).value = selectedText;
        });
        buttonDiv.appendChild(button);
        rowDiv.appendChild(buttonDiv);

        panel.appendChild(rowDiv);
    }

    // Call the function to display images in the panel
    displayImagesInPanel();


  // Function to find all email addresses on page load
  function findEmailAddresses() {
    // Get all elements on the page
    const allElements = document.querySelectorAll('*');

    const emailAddresses = [];

    // Regular expression to match email addresses
    const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g;

    allElements.forEach(element => {
      const elementText = element.textContent || element.innerText;

      // Check if elementText is defined before running match
      if (elementText) {
        const matches = elementText.match(emailRegex);
        if (matches) {
          matches.forEach(email => {
            if (!emailAddresses.includes(email)) {
              emailAddresses.push(email);
            }
          });
        }
      }
    });

    console.log("Found email addresses:", emailAddresses);

    // Set the input field value
    setInputValue(emailAddresses);

    return emailAddresses;
  }

  // Function to set the input field value
  function setInputValue(emailArray) {
    const inputField = document.getElementById("input8");
    if (inputField) {
      inputField.value = emailArray.join(", ");
      console.log("Input field value set to:", inputField.value);
    } else {
      console.log("Input field with ID 'input8' not found");
    }
  }

    const createRecordBtn = document.createElement('button');
    createRecordBtn.innerText = "Create Record in Airtable";
    createRecordBtn.style = "background-color: #E6E4D5; color: white; border-radius: 5px; padding: 10px; width: 100%; margin: 10px;";
    createRecordBtn.disabled = true;

    // Create the padded div around the 'Create Record' button
    const paddedCreateRecordDiv = createPaddedDiv(createRecordBtn);
    paddedCreateRecordDiv.style = "display: flex; justify-content: center;";

    panel.appendChild(paddedCreateRecordDiv);
    document.body.appendChild(panel);


    // Function to enable or disable the 'Create Record' button
    const checkInputFields = function() {
        const conditions = ['input0', 'input1', 'input2', 'input3', 'input4', 'input5', 'input6', 'input8'].every(id => document.getElementById(id).value);
        createRecordBtn.style.backgroundColor = conditions ? "#1B2B1C" : "#E6E4D5";
        createRecordBtn.disabled = !conditions;
    };

    document.addEventListener('input', checkInputFields);

    // Function to prepopulate the 'race_website_at' field with the current URL
const prepopulateWebsiteUrl = () => {
    const websiteInput = document.getElementById("input9"); // "input8" corresponds to "race_website_at"
    if (websiteInput) {
        websiteInput.value = window.location.href;
        console.log("Prepopulated 'race_website_at' with the current URL");
    } else {
        console.log("The input field for 'race_website_at' could not be found.");
    }
};

// Function to safely read the 'checked' property of a checkbox
const safeCheckboxRead = (checkboxElement) => {
    if (checkboxElement !== null) {
        return checkboxElement.checked;
    } else {
        console.log("Warning: Checkbox element is null");
        return false;
    }
};

// Collect URLs based on checkbox selection
const collectImageURLs = () => {
    const galleryImages = [];
    const mapImages = [];
    let mainPhoto = "";

    const imgCheckboxContainers = document.querySelectorAll('div');

    imgCheckboxContainers.forEach(container => {
        const imgElement = container.querySelector('img');

        // Ensure checkboxes exist before reading their 'checked' property
        const mainCheckbox = container.querySelector('.main-photo-checkbox');
        const mapCheckbox = container.querySelector('input[type=checkbox]:nth-child(4)');
        const galleryCheckbox = container.querySelector('input[type=checkbox]:nth-child(6)');

        if (mainCheckbox && mainCheckbox.checked) {
            mainPhoto = imgElement.src;
        }

        if (mapCheckbox && mapCheckbox.checked) {
            mapImages.push(imgElement.src);
        }

        if (galleryCheckbox && galleryCheckbox.checked) {
            galleryImages.push(imgElement.src);
        }
    });

    return { galleryImages, mapImages, mainPhoto };
};


    // Add click event to create record button
    createRecordBtn.addEventListener('click', async function() {
        createRecordBtn.innerText = "Wait..."; // Change text to "Wait..."
        createRecordBtn.disabled = true;  // Disable the button

        // Call the function to see it in action
        getEndDateTime();

        // Gather existing data
        let data = {
            "source": "MazScraper",
            "time": `${seconds}`,
            "start_time": `${dateStartTimeString}`,
            "end_time": `${dateEndTimeString}`
        };

        for (let i = 0; i < 10; i++) {
            data[webhookKeys[i]] = document.getElementById(`input${i}`).value;
        }

        // Collect image URLs based on checkbox selections
        const { galleryImages, mapImages, mainPhoto } = collectImageURLs();

        // Include new fields in the data object
        data["gallery_images_at"] = galleryImages;
        data["map_images_at"] = mapImages;
        data["photo_main_at"] = mainPhoto;

        // Make the API request to the webhook
        const response = await fetch('https://hook.us1.make.com/tygbvj6syy8boyww8wqy1fwmhimju9gq', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });

        // Get and log the response data
        const responseData = await response.json();
        console.log(`race_record_id: ${JSON.stringify(responseData)}`);

        // Update the webhookResponseDiv with the new data
        const webhookResponseDiv = document.getElementById('webhook-response-div');
        webhookResponseDiv.innerHTML += `<br>Response Data: ${JSON.stringify(responseData)}`;

        createRecordBtn.innerText = "Create Record in Airtable";
        createRecordBtn.disabled = false;  // Re-enable the button
    });

    // Create the toggle button and add it to the top-left corner
    const toggleButton = document.createElement('button');
    toggleButton.innerText = "Create Race";
    toggleButton.style = "position: fixed; right: 20px; top: 20px; z-index: 10000; background-color: #BFF103; padding: 10px; border-radius: 5px; border: 1px solid #BFF103; color: #1B2B1C;";
    toggleButton.addEventListener('click', togglePanel);
    document.body.appendChild(toggleButton);

    // Call the function to prepopulate 'race_website_at' field
    prepopulateWebsiteUrl();

    // Add timer to the panel div
    addTimerToPanel(panel);

    // Call the function to set input6 field to type date
    setInputTypeToDate();

    // Call the function to set input7 field to type date
    setInputTypeToTime();

    // You can call the function like this to change multiple inputs:
    changeMultipleInputsToTextAreasWithStyle(['input1', 'input8']);

    // Call the function to find email addresses and set the value of input8 field
    findEmailAddresses();

    // Call the function to set placeholders when the document is loaded
    setUniquePlaceholders();

    // Call the function to see it in action
    getStartDateTime();

})();
