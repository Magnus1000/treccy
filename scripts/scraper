// ==UserScript==
// @name         Create Record In Airtable
// @namespace    http://tampermonkey.net/
// @version      4.19.0
// @description  Enhanced UI for creating records in Airtable
// @author       Maz
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Function to check if the script is running in the main frame
    const isMainFrame = () => {
        return window.self === window.top;
    };

    // If not in main frame, exit the function
    if (!isMainFrame()) {
        return;
    }

    console.log("Running script in main frame only");

    // Create "Lookup" button and set its properties
    const lookupBtn = document.createElement('button');
    lookupBtn.innerText = "Lookup";
    lookupBtn.style = "color: black; border: 1px solid black; border-radius: 5px; padding: 5px; margin-left: 10px; margin-right: 10px; width: 30%;";

    // Function to append the 'Lookup' button to the Panel
    const appendLookupButtonToPanel = (panelElement) => {
        panelElement.appendChild(lookupBtn);
        console.log("Lookup button appended to panel");  // Logging to confirm
    };

    // Lookup event listener
    lookupBtn.addEventListener('click', async function() {
        const currentURL = window.location.href;
        const airtableApiKey = 'keyEiGPuqmRTtXcZ0'; // Replace with your Airtable API key
        const airtableBase = 'app1buEm2yEqxilPh';
        const airtableTable = 'tblS5SD7MxfZUl3wf';
        const airtableUrl = `https://api.airtable.com/v0/${airtableBase}/${airtableTable}?filterByFormula={race_website_at}='${currentURL}'`;

        const response = await fetch(airtableUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${airtableApiKey}`
            }
        });

        const responseData = await response.json();

        // Log and update the webhookResponseDiv with the new data
        console.log(`Airtable response: ${JSON.stringify(responseData)}`);
        const webhookResponseDiv = document.getElementById('webhook-response-div');
        if (responseData.records.length > 0) {
            webhookResponseDiv.innerHTML += `<br>Record exists: ${JSON.stringify(responseData.records)}`;
        } else {
            webhookResponseDiv.innerHTML += '<br>No matching record found.';
        }
    });

    // Function to toggle panel visibility
    const togglePanel = () => {
        const panel = document.getElementById('panel');
        if (panel.style.right === '0px') {
            panel.style.right = '-20%';
        } else {
            panel.style.right = '0px';
        }
        console.log("Panel toggled");  // Logging the toggle action
    };

    // Function to create a padded div around a given element
    const createPaddedDiv = (element) => {
        const paddedDiv = document.createElement('div');
        paddedDiv.style.paddingTop = "20px";
        paddedDiv.style.paddingBottom = "20px";
        paddedDiv.appendChild(element);
        return paddedDiv;
    };

    // Function to create a div for webhook responses
    const createWebhookResponseDiv = () => {
    const webhookResponseDiv = document.createElement('div');
    webhookResponseDiv.id = 'webhook-response-div';
    webhookResponseDiv.style = "background-color: lightgrey; padding: 10px; border-radius: 5px; margin-left: 10px; margin-right: 10px; font-size: 11px;";
    webhookResponseDiv.innerHTML = "<strong>Webhook Responses:</strong><br>";
    return webhookResponseDiv;
    };

    // Define labels and keys for easy modification
    const buttonLabels = ["Race Name", "Country", "Region", "City", "Sports", "Description", "Date", "Admin Emails"];
    const webhookKeys = ["name_at", "country_at", "region_at", "city_at", "sports_at", "description_at", "start_date_at", "admin_emails_at"];

    // Create panel and set its properties
    const panel = document.createElement('div');
    panel.id = "panel";
    panel.style = "position: fixed; right: -20%; top: 0; width: 20%; min-height: 100vh; max-height: 100vh; overflow-y: auto; background-color: #f1f1f1; z-index: 9999; padding: 60px 10px 10px 10px; display: flex; flex-direction: column; justify-content: flex-start; row-gap: 10px;";

    // Append the 'Lookup' button to the panel
    appendLookupButtonToPanel(panel);

    // Create and append the webhookResponseDiv
    const webhookResponseDiv = createWebhookResponseDiv();
    panel.appendChild(webhookResponseDiv);

    // Create the fields and buttons
    for (let i = 0; i < 7; i++) {
        const rowDiv = document.createElement('div');
        rowDiv.style = "display: flex; justify-content: center; align-items: flex-end; column-gap: 5px;";

        const inputDiv = document.createElement('div');
        inputDiv.style = "display: flex; flex-direction: column; width: 60%;"; // Column layout for the label and input
        const label = document.createElement('label');
        label.innerText = buttonLabels[i];
        label.htmlFor = `input${i}`;
        label.style = "font-size: 10px; line-height: 10px;";
        const input = document.createElement('input');
        input.id = `input${i}`;
        input.style = "margin: 0; padding: 0; height: 30px;";
        inputDiv.appendChild(label);
        inputDiv.appendChild(input);
        rowDiv.appendChild(inputDiv);

        const buttonDiv = document.createElement('div');
        const button = document.createElement('button');
        button.innerText = `Set ${buttonLabels[i]}`;
        button.id = `btn${i}`;
        button.style = "margin: 0; padding: 0 10px 0 10px; border: 1px solid black; border-radius: 5px; height: 30px; font-size: 10px; width: 100%";
        buttonDiv.style = "width: 30%;";
        button.addEventListener('click', function() {
            const selectedText = window.getSelection().toString();
            document.getElementById(`input${i}`).value = selectedText;
        });
        buttonDiv.appendChild(button);
        rowDiv.appendChild(buttonDiv);

        panel.appendChild(rowDiv);
    }

    const createRecordBtn = document.createElement('button');
    createRecordBtn.innerText = "Create Record in Airtable";
    createRecordBtn.style = "background-color: grey; color: white; border-radius: 5px; padding: 10px; margin-top: 20px; width: 100%;";
    createRecordBtn.disabled = true;

    // Create the padded div around the 'Create Record' button
    const paddedCreateRecordDiv = createPaddedDiv(createRecordBtn);
    paddedCreateRecordDiv.style = "display: flex; justify-content: center; padding-left: 10px; padding-right: 10px";

    panel.appendChild(paddedCreateRecordDiv);
    document.body.appendChild(panel);


    // Function to enable or disable the 'Create Record' button
    const checkInputFields = function() {
        const conditions = ['input0', 'input1', 'input2', 'input3'].every(id => document.getElementById(id).value);
        createRecordBtn.style.backgroundColor = conditions ? "black" : "grey";
        createRecordBtn.disabled = !conditions;
    };

    document.addEventListener('input', checkInputFields);

    // Add click event to create record button
    createRecordBtn.addEventListener('click', async function() {
        let data = {
            "url": window.location.href,
            "source": "MazScraper"
        };

        for (let i = 0; i < 7; i++) {
            data[webhookKeys[i]] = document.getElementById(`input${i}`).value;
        }

        const response = await fetch('https://hook.us1.make.com/tygbvj6syy8boyww8wqy1fwmhimju9gq', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });

        const responseData = await response.json();
        console.log(`race_record_id: ${responseData}`);

        // Update the webhookResponseDiv with the new data
        const webhookResponseDiv = document.getElementById('webhook-response-div');
        webhookResponseDiv.innerHTML += `<br>Response Data: ${JSON.stringify(responseData)}`;

    });

    // Create the toggle button and add it to the top-left corner
    const toggleButton = document.createElement('button');
    toggleButton.innerText = "Create Race";
    toggleButton.style = "position: fixed; right: 20px; top: 20px; z-index: 10000; background-color: #f3f3f3; padding: 10px; border-radius: 5px; border: 1px solid black;";
    toggleButton.addEventListener('click', togglePanel);
    document.body.appendChild(toggleButton);

})();
