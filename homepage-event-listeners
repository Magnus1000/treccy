<script>
// Displays results on the map
function removeExistingMarkers() {
    for (const marker of currentMarkers) {
        marker.remove();
    }
    currentMarkers = [];
}

function createMarkerOnMap(map, result) {
    let markerImageUrl;
    
    if (result.disciplines_ag.length === 1) {
        let disciplineKey = result.disciplines_ag[0].toLowerCase();
        // Check if the discipline key exists in the disciplineMarkers object
        if (disciplineMarkers[disciplineKey]) {
            markerImageUrl = disciplineMarkers[disciplineKey];
        } else {
            // Log a warning to the console if the key is not found
            console.warn(`Discipline key not found: ${disciplineKey}`);
            markerImageUrl = 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64ce497c38241ed462982298_favicon32.jpg';
        }
    } else {
        // Use a generic marker for multiple disciplines
        markerImageUrl = 'https://uploads-ssl.webflow.com/64ccebfb87c59cf5f3e54ed9/64ce497c38241ed462982298_favicon32.jpg';
    }

    // Creating the disciplines div
    let disciplinesDiv = '';
    result.disciplines_ag.forEach(discipline => {
        disciplinesDiv += `<div class="map-popup-discipline">${discipline}</div>`;
    });

    // Formatted date
    const formattedDate = formatDate(result.date_ag);

    const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(`
        <div class="map-popup-div">
            <div class="map-popup-image-div">
                <a href="/races/${result.slug_ag}" class="map-popup-link-block w-inline-block">
                    <img src="${result.photo_main_ag}" loading="lazy" alt="" class="map-popup-image">
                </a>
                <div class="map-popup-discipline-div">${disciplinesDiv}</div>
                <div class="heart-icon-div"><div class="heart-icon w-embed"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" aria-hidden="true" role="presentation" focusable="false">
  <path d="M16 28c7-4.73 14-10 14-17a6.98 6.98 0 0 0-7-7c-1.8 0-3.58.68-4.95 2.05L16 8.1l-2.05-2.05a6.98 6.98 0 0 0-9.9 0A6.98 6.98 0 0 0 2 11c0 7 7 12.27 14 17z"></path>
</svg></div>
                </div>
            </div>
            <a href="/races/${result.slug_ag}" class="link-block w-inline-block">
                <div class="map-popup-header-div">
                    <div class="map-popup-header">${result.name_ag}</div>
                </div>
                <div class="map-popup-country-and-date-div">
                    <div class="map-popup-header-country-div">
                        <div class="map-popup-city-text">${result.city_ag}</div>
                        <div class="map-popup-comma">, </div>
                        <div class="map-popup-country-text">${result.country_ag}</div>
                    </div>
                    <div class="map-popup-date-div">
                        <div class="map-popup-date-text">${formattedDate}</div>
                    </div>
                </div>
            </a>
        </div>
    `);

    const customMarker = new Image(50, 50);
    customMarker.src = markerImageUrl;

    const marker = new mapboxgl.Marker(customMarker)
        .setLngLat([result._geoloc.lng, result._geoloc.lat])
        .setPopup(popup)
        .addTo(map);

    currentMarkers.push(marker);
}



async function displayMapWithResults(lat, lng) {
    console.log("Displaying Map with Results...");
    
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/magnus1993/cll28qk0n006a01pu7y9h0ouv',
        center: [lng, lat],
        zoom: 10,
        accessToken: mapboxToken  
    });

    // Fetch Algolia Results
    const results = await fetchAlgoliaResults(lat, lng);
    
    // Clear any existing markers
    removeExistingMarkers();

    // Display Algolia results on the map
    results.forEach(result => {
        createMarkerOnMap(map, result);
    });

    map.resize();
}

// Checkbox Styling
function initializeCheckboxStyling() {
    console.log("Adjusting Checkbox Styling...");

    function updateCheckboxStyling() {
        const spanElement = this.nextElementSibling;
        const parentLabel = spanElement.closest(".w-checkbox.checkbox-buttons");
        if (this.checked) {
            parentLabel.classList.add("active-filter");
        } else {
            parentLabel.classList.remove("active-filter");
        }
    }

    const checkboxes = document.querySelectorAll(".w-checkbox.checkbox-buttons input[type='checkbox']");
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener("change", updateCheckboxStyling);
        updateCheckboxStyling.call(checkbox);
    });
}
    // Update URL params with filters 
    function updateURLWithFilters() {
    // Get all checkboxes with the class 'disciplinefilter_checkbox'
    const disciplineFilterCheckboxes = document.querySelectorAll('.disciplinefilter_checkbox');

    // Get discipline values from checked checkboxes
    const selectedDisciplines = Array.from(disciplineFilterCheckboxes)
      .filter(checkbox => checkbox.checked)
      .map(checkbox => checkbox.getAttribute('filter-value'));

    // Log the selected disciplines to the console
    console.log('Selected discipline filters:', selectedDisciplines);

    // Distance filters
    const minimumDistance = document.getElementById('minimum-distance').value;
    const maximumDistance = document.getElementById('maximum-distance').value;

    // Location range filter
    const locationRange = document.getElementById('location_range').value;

    // Date filters
    const dateFrom = document.getElementById('dateFrom').value;
    const dateTo = document.getElementById('dateTo').value;

    // Type filter
    const selectedType = document.querySelector('input[name="type"]:checked');

    // Get the search input element
    const searchBarElement = document.getElementById('location-search-bar');
    
    // Get the value and lat-lon attributes
    const searchBarValue = searchBarElement.value;
    const searchBarLat = searchBarElement.getAttribute('data-lat');
    const searchBarLon = searchBarElement.getAttribute('data-lon');

    let params = new URLSearchParams();

    // Add selected disciplines to URL parameters
  selectedDisciplines.forEach((discipline, index) => {
      params.append(`discipline${index}`, discipline);
  });

    if (minimumDistance) {
        params.set('minDist', minimumDistance);
    }

    if (maximumDistance) {
        params.set('maxDist', maximumDistance);
    }

    if (locationRange) {
        params.set('locationRange', locationRange);
    }

    if (dateFrom) {
        params.set('fromDate', dateFrom);
    }

    if (dateTo) {
        params.set('toDate', dateTo);
    }

    if (selectedType) {
    params.set('type', selectedType.value);
    }

    
    if (searchBarValue) {
        params.set('location', searchBarValue);
    }

    if (searchBarLat && searchBarLon) {
        params.set('lat', searchBarLat);
        params.set('lng', searchBarLon);
    }

  // Log the final parameters to the console
  console.log('Final URL parameters:', params.toString());

    // Update the URL without causing a page reload
    history.pushState({}, '', '?' + params.toString());
}


// Function to get the query parameters from the URL
function getQueryParams() {
  const queryParams = {};
  const queryString = window.location.search.substring(1);
  const pairs = queryString.split('&');
  pairs.forEach(pair => {
    const [key, value] = pair.split('=');
    queryParams[key] = decodeURIComponent(value);
  });
  return queryParams;
}

// Function to get the email from the form
function getEmail() {
  // Assuming that the email field has an ID 'email'
  const emailElement = document.getElementById('email');
  return emailElement ? emailElement.value : '';
}

// Function to validate email format
function isValidEmail(email) {
  // Regular expression to check the email format
  const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  return regex.test(email);
}

// Function to send the webhook
function sendWebhook(email, params) {
  // Check if the email is valid
  if (!isValidEmail(email)) {
    console.error('Invalid email:', email);
    return; // Exit the function if the email is not valid
  }

  // Construct the payload with email and parameters
  const payload = {
    email,
    params
  };

  // Webhook URL
  const url = 'https://hook.us1.make.com/chr1792n4xwbkd96ea3zhcdmnn9khntl';

   // Send a POST request to the webhook
  fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload)
  })
  .then(response => response.text())
  .then(data => {
    console.log('Webhook response:', data);

    // Show the success message
    const successMessage = document.getElementById('success-message-slide-in');
    if (successMessage) {
      successMessage.style.display = 'block';

      // Hide the success message after 5 seconds (5000 milliseconds)
      setTimeout(() => {
        successMessage.style.display = 'none';
      }, 5000);
    }
  })
  .catch(error => console.error('Error sending webhook:', error));
}

// Assuming the form containing the email input has the ID 'email-form'
document.getElementById('email-form').addEventListener('submit', function(e) {
  // Prevent the default form submission behavior
  e.preventDefault();
});

document.getElementById('submit_email_initial').addEventListener('click', function() {
  // Get the email from the form
  const email = getEmail();
  
  // Get the URL parameters
  const params = getQueryParams();

  // Log the details to the console
  console.log('Sending webhook with email:', email, 'and parameters:', params);

  // Send the webhook
  sendWebhook(email, params);
});

document.getElementById('copy_to_clipboard').addEventListener('click', function() {
  // Get the current page's URL
  const urlToCopy = window.location.href;

  // Use the Clipboard API to write the URL to the clipboard
  navigator.clipboard.writeText(urlToCopy).then(() => {
    console.log('URL copied to clipboard:', urlToCopy);
  }).catch(err => {
    console.error('Failed to copy URL to clipboard:', err);
  });

  // Get the popup element by ID
  const popup = document.getElementById('copy_to_clipboard_popin_slider');

  // Check if the popup element exists
  if (popup) {
    // Show the popup
    popup.style.display = 'block';
    popup.style.opacity = 1; // Make it fully visible

    // Set a timeout to fade out the popup after 5 seconds (5000 milliseconds)
    setTimeout(() => {
      // You can use CSS transitions for a smooth fade effect
      popup.style.transition = 'opacity 1s ease-out';
      popup.style.opacity = 0;

      // Optionally, hide the popup completely after the fade effect is finished
      setTimeout(() => {
        popup.style.display = 'none';
      }, 1000); // Match the duration of the transition (1s in this case)
    }, 5000);
  }
});
</script>
